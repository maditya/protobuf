// Code generated by protoc-gen-gogo.
// source: unrecognizedgroup.proto
// DO NOT EDIT!

/*
	Package unrecognizedgroup is a generated protocol buffer package.

	It is generated from these files:
		unrecognizedgroup.proto

	It has these top-level messages:
		NewNoGroup
		A
		OldWithGroup
*/
package unrecognizedgroup

import proto "github.com/maditya/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/maditya/protobuf/gogoproto"

import github_com_maditya_protobuf_protoc_gen_gogo_descriptor "github.com/maditya/protobuf/protoc-gen-gogo/descriptor"
import github_com_maditya_protobuf_proto "github.com/maditya/protobuf/proto"
import compress_gzip "compress/gzip"
import bytes "bytes"
import io_ioutil "io/ioutil"

import strings "strings"
import sort "sort"
import strconv "strconv"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type NewNoGroup struct {
	Field1           *int64    `protobuf:"varint,1,opt,name=Field1,json=field1" json:"Field1,omitempty"`
	Field3           []float64 `protobuf:"fixed64,3,rep,name=Field3,json=field3" json:"Field3,omitempty"`
	A                *A        `protobuf:"bytes,5,opt,name=A,json=a" json:"A,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *NewNoGroup) Reset()                    { *m = NewNoGroup{} }
func (*NewNoGroup) ProtoMessage()               {}
func (*NewNoGroup) Descriptor() ([]byte, []int) { return fileDescriptorUnrecognizedgroup, []int{0} }

type A struct {
	AField           *int64 `protobuf:"varint,1,opt,name=AField,json=aField" json:"AField,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *A) Reset()                    { *m = A{} }
func (*A) ProtoMessage()               {}
func (*A) Descriptor() ([]byte, []int) { return fileDescriptorUnrecognizedgroup, []int{1} }

type OldWithGroup struct {
	Field1           *int64               `protobuf:"varint,1,opt,name=Field1,json=field1" json:"Field1,omitempty"`
	Group1           *OldWithGroup_Group1 `protobuf:"group,2,opt,name=Group1,json=group1" json:"group1,omitempty"`
	Field3           []float64            `protobuf:"fixed64,3,rep,name=Field3,json=field3" json:"Field3,omitempty"`
	Group2           *OldWithGroup_Group2 `protobuf:"group,4,opt,name=Group2,json=group2" json:"group2,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *OldWithGroup) Reset()                    { *m = OldWithGroup{} }
func (*OldWithGroup) ProtoMessage()               {}
func (*OldWithGroup) Descriptor() ([]byte, []int) { return fileDescriptorUnrecognizedgroup, []int{2} }

type OldWithGroup_Group1 struct {
	Field1           *int64    `protobuf:"varint,1,opt,name=Field1,json=field1" json:"Field1,omitempty"`
	Field2           *int32    `protobuf:"varint,2,opt,name=Field2,json=field2" json:"Field2,omitempty"`
	Field3           []float64 `protobuf:"fixed64,3,rep,name=Field3,json=field3" json:"Field3,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *OldWithGroup_Group1) Reset()      { *m = OldWithGroup_Group1{} }
func (*OldWithGroup_Group1) ProtoMessage() {}
func (*OldWithGroup_Group1) Descriptor() ([]byte, []int) {
	return fileDescriptorUnrecognizedgroup, []int{2, 0}
}

type OldWithGroup_Group2 struct {
	Field1           *int64    `protobuf:"varint,1,opt,name=Field1,json=field1" json:"Field1,omitempty"`
	Field2           []float64 `protobuf:"fixed64,2,rep,name=Field2,json=field2" json:"Field2,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *OldWithGroup_Group2) Reset()      { *m = OldWithGroup_Group2{} }
func (*OldWithGroup_Group2) ProtoMessage() {}
func (*OldWithGroup_Group2) Descriptor() ([]byte, []int) {
	return fileDescriptorUnrecognizedgroup, []int{2, 1}
}

func init() {
	proto.RegisterType((*NewNoGroup)(nil), "unrecognizedgroup.NewNoGroup")
	proto.RegisterType((*A)(nil), "unrecognizedgroup.A")
	proto.RegisterType((*OldWithGroup)(nil), "unrecognizedgroup.OldWithGroup")
	proto.RegisterType((*OldWithGroup_Group1)(nil), "unrecognizedgroup.OldWithGroup.Group1")
	proto.RegisterType((*OldWithGroup_Group2)(nil), "unrecognizedgroup.OldWithGroup.Group2")
}
func (this *NewNoGroup) Description() (desc *github_com_maditya_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return UnrecognizedgroupDescription()
}
func (this *A) Description() (desc *github_com_maditya_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return UnrecognizedgroupDescription()
}
func (this *OldWithGroup) Description() (desc *github_com_maditya_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return UnrecognizedgroupDescription()
}
func (this *OldWithGroup_Group1) Description() (desc *github_com_maditya_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return UnrecognizedgroupDescription()
}
func (this *OldWithGroup_Group2) Description() (desc *github_com_maditya_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return UnrecognizedgroupDescription()
}
func UnrecognizedgroupDescription() (desc *github_com_maditya_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_maditya_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 3481 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x5a, 0x59, 0x6c, 0x1b, 0xd7,
		0x7a, 0xf6, 0x70, 0x13, 0xf9, 0x93, 0xa2, 0x46, 0x23, 0x45, 0xa6, 0x95, 0x44, 0x92, 0x99, 0x4d,
		0x76, 0x5a, 0x39, 0x96, 0x97, 0xd8, 0x74, 0x13, 0x83, 0x92, 0x68, 0x46, 0x86, 0x16, 0x76, 0x24,
		0x25, 0x4e, 0xfa, 0x30, 0x38, 0x1a, 0x1e, 0x52, 0x63, 0x0f, 0x67, 0xd8, 0x99, 0xa1, 0x6d, 0xf9,
		0xc9, 0x45, 0xba, 0x05, 0x45, 0xdb, 0x74, 0x01, 0x9a, 0xbd, 0x71, 0xd0, 0x36, 0x69, 0xba, 0x25,
		0xdd, 0x50, 0xf4, 0xa9, 0x40, 0x91, 0xb6, 0xe8, 0x43, 0xd1, 0xf6, 0xa9, 0x0f, 0x7d, 0xb8, 0x36,
		0x02, 0xdc, 0x2d, 0xf7, 0xde, 0x5c, 0xc0, 0xc0, 0xbd, 0x40, 0x5e, 0x2e, 0xce, 0x36, 0x1c, 0x2e,
		0xd2, 0x50, 0x01, 0x72, 0x73, 0x5f, 0x6c, 0x9d, 0xff, 0xfc, 0xdf, 0x37, 0xff, 0xf9, 0xcf, 0x7f,
		0xfe, 0xff, 0x9f, 0x33, 0x84, 0x7f, 0x3d, 0x09, 0x33, 0x75, 0xdb, 0xae, 0x9b, 0xf8, 0x44, 0xd3,
		0xb1, 0x3d, 0x7b, 0xbb, 0x55, 0x3b, 0x51, 0xc5, 0xae, 0xee, 0x18, 0x4d, 0xcf, 0x76, 0xe6, 0xa8,
		0x4c, 0x19, 0x61, 0x1a, 0x73, 0x42, 0x23, 0xbf, 0x0a, 0xa3, 0x97, 0x0c, 0x13, 0x2f, 0xf9, 0x8a,
		0x1b, 0xd8, 0x53, 0xce, 0x41, 0xac, 0x66, 0x98, 0x38, 0x27, 0xcd, 0x44, 0x67, 0xd3, 0xf3, 0x8f,
		0xce, 0x75, 0x81, 0xe6, 0x3a, 0x11, 0x15, 0x22, 0x56, 0x29, 0x22, 0xff, 0x69, 0x0c, 0xc6, 0xfa,
		0xcc, 0x2a, 0x0a, 0xc4, 0x2c, 0xd4, 0x20, 0x8c, 0xd2, 0x6c, 0x4a, 0xa5, 0x7f, 0x2b, 0x39, 0x18,
		0x6a, 0x22, 0xfd, 0x1a, 0xaa, 0xe3, 0x5c, 0x84, 0x8a, 0xc5, 0x50, 0x99, 0x02, 0xa8, 0xe2, 0x26,
		0xb6, 0xaa, 0xd8, 0xd2, 0x77, 0x73, 0xd1, 0x99, 0xe8, 0x6c, 0x4a, 0x0d, 0x48, 0x94, 0x27, 0x61,
		0xb4, 0xd9, 0xda, 0x36, 0x0d, 0x5d, 0x0b, 0xa8, 0xc1, 0x4c, 0x74, 0x36, 0xae, 0xca, 0x6c, 0x62,
		0xa9, 0xad, 0xfc, 0x04, 0x8c, 0xdc, 0xc0, 0xe8, 0x5a, 0x50, 0x35, 0x4d, 0x55, 0xb3, 0x44, 0x1c,
		0x50, 0x5c, 0x84, 0x4c, 0x03, 0xbb, 0x2e, 0xaa, 0x63, 0xcd, 0xdb, 0x6d, 0xe2, 0x5c, 0x8c, 0xae,
		0x7e, 0xa6, 0x67, 0xf5, 0xdd, 0x2b, 0x4f, 0x73, 0xd4, 0xe6, 0x6e, 0x13, 0x2b, 0x45, 0x48, 0x61,
		0xab, 0xd5, 0x60, 0x0c, 0xf1, 0x3d, 0xfc, 0x57, 0xb2, 0x5a, 0x8d, 0x6e, 0x96, 0x24, 0x81, 0x71,
		0x8a, 0x21, 0x17, 0x3b, 0xd7, 0x0d, 0x1d, 0xe7, 0x12, 0x94, 0xe0, 0x89, 0x1e, 0x82, 0x0d, 0x36,
		0xdf, 0xcd, 0x21, 0x70, 0xca, 0x22, 0xa4, 0xf0, 0x4d, 0x0f, 0x5b, 0xae, 0x61, 0x5b, 0xb9, 0x21,
		0x4a, 0xf2, 0x58, 0x9f, 0x5d, 0xc4, 0x66, 0xb5, 0x9b, 0xa2, 0x8d, 0x53, 0xce, 0xc2, 0x90, 0xdd,
		0xf4, 0x0c, 0xdb, 0x72, 0x73, 0xc9, 0x19, 0x69, 0x36, 0x3d, 0xff, 0x50, 0xdf, 0x40, 0x58, 0x67,
		0x3a, 0xaa, 0x50, 0x56, 0x96, 0x41, 0x76, 0xed, 0x96, 0xa3, 0x63, 0x4d, 0xb7, 0xab, 0x58, 0x33,
		0xac, 0x9a, 0x9d, 0x4b, 0x51, 0x82, 0xe9, 0xde, 0x85, 0x50, 0xc5, 0x45, 0xbb, 0x8a, 0x97, 0xad,
		0x9a, 0xad, 0x66, 0xdd, 0x8e, 0xb1, 0x32, 0x01, 0x09, 0x77, 0xd7, 0xf2, 0xd0, 0xcd, 0x5c, 0x86,
		0x46, 0x08, 0x1f, 0xe5, 0x7f, 0x14, 0x87, 0x91, 0x41, 0x42, 0xec, 0x02, 0xc4, 0x6b, 0x64, 0x95,
		0xb9, 0xc8, 0x41, 0x7c, 0xc0, 0x30, 0x9d, 0x4e, 0x4c, 0x7c, 0x49, 0x27, 0x16, 0x21, 0x6d, 0x61,
		0xd7, 0xc3, 0x55, 0x16, 0x11, 0xd1, 0x01, 0x63, 0x0a, 0x18, 0xa8, 0x37, 0xa4, 0x62, 0x5f, 0x2a,
		0xa4, 0xae, 0xc0, 0x88, 0x6f, 0x92, 0xe6, 0x20, 0xab, 0x2e, 0x62, 0xf3, 0x44, 0x98, 0x25, 0x73,
		0x25, 0x81, 0x53, 0x09, 0x4c, 0xcd, 0xe2, 0x8e, 0xb1, 0xb2, 0x04, 0x60, 0x5b, 0xd8, 0xae, 0x69,
		0x55, 0xac, 0x9b, 0xb9, 0xe4, 0x1e, 0x5e, 0x5a, 0x27, 0x2a, 0x3d, 0x5e, 0xb2, 0x99, 0x54, 0x37,
		0x95, 0xf3, 0xed, 0x50, 0x1b, 0xda, 0x23, 0x52, 0x56, 0xd9, 0x21, 0xeb, 0x89, 0xb6, 0x2d, 0xc8,
		0x3a, 0x98, 0xc4, 0x3d, 0xae, 0xf2, 0x95, 0xa5, 0xa8, 0x11, 0x73, 0xa1, 0x2b, 0x53, 0x39, 0x8c,
		0x2d, 0x6c, 0xd8, 0x09, 0x0e, 0x95, 0x47, 0xc0, 0x17, 0x68, 0x34, 0xac, 0x80, 0x66, 0xa1, 0x8c,
		0x10, 0xae, 0xa1, 0x06, 0x9e, 0x3c, 0x07, 0xd9, 0x4e, 0xf7, 0x28, 0xe3, 0x10, 0x77, 0x3d, 0xe4,
		0x78, 0x34, 0x0a, 0xe3, 0x2a, 0x1b, 0x28, 0x32, 0x44, 0xb1, 0x55, 0xa5, 0x59, 0x2e, 0xae, 0x92,
		0x3f, 0x27, 0x9f, 0x86, 0xe1, 0x8e, 0xc7, 0x0f, 0x0a, 0xcc, 0xbf, 0x96, 0x80, 0xf1, 0x7e, 0x31,
		0xd7, 0x37, 0xfc, 0x27, 0x20, 0x61, 0xb5, 0x1a, 0xdb, 0xd8, 0xc9, 0x45, 0x29, 0x03, 0x1f, 0x29,
		0x45, 0x88, 0x9b, 0x68, 0x1b, 0x9b, 0xb9, 0xd8, 0x8c, 0x34, 0x9b, 0x9d, 0x7f, 0x72, 0xa0, 0xa8,
		0x9e, 0x5b, 0x21, 0x10, 0x95, 0x21, 0x95, 0x67, 0x21, 0xc6, 0x53, 0x1c, 0x61, 0x38, 0x3e, 0x18,
		0x03, 0x89, 0x45, 0x95, 0xe2, 0x94, 0x07, 0x21, 0x45, 0xfe, 0x67, 0xbe, 0x4d, 0x50, 0x9b, 0x93,
		0x44, 0x40, 0xfc, 0xaa, 0x4c, 0x42, 0x92, 0x86, 0x59, 0x15, 0x8b, 0xd2, 0xe0, 0x8f, 0xc9, 0xc6,
		0x54, 0x71, 0x0d, 0xb5, 0x4c, 0x4f, 0xbb, 0x8e, 0xcc, 0x16, 0xa6, 0x01, 0x93, 0x52, 0x33, 0x5c,
		0xf8, 0x3c, 0x91, 0x29, 0xd3, 0x90, 0x66, 0x51, 0x69, 0x58, 0x55, 0x7c, 0x93, 0x66, 0x9f, 0xb8,
		0xca, 0x02, 0x75, 0x99, 0x48, 0xc8, 0xe3, 0xaf, 0xba, 0xb6, 0x25, 0xb6, 0x96, 0x3e, 0x82, 0x08,
		0xe8, 0xe3, 0x9f, 0xee, 0x4e, 0x7c, 0x0f, 0xf7, 0x5f, 0x5e, 0x77, 0x2c, 0xe6, 0xff, 0x31, 0x02,
		0x31, 0x7a, 0xde, 0x46, 0x20, 0xbd, 0xf9, 0x62, 0xa5, 0xa4, 0x2d, 0xad, 0x6f, 0x2d, 0xac, 0x94,
		0x64, 0x49, 0xc9, 0x02, 0x50, 0xc1, 0xa5, 0x95, 0xf5, 0xe2, 0xa6, 0x1c, 0xf1, 0xc7, 0xcb, 0x6b,
		0x9b, 0x67, 0x4f, 0xcb, 0x51, 0x1f, 0xb0, 0xc5, 0x04, 0xb1, 0xa0, 0xc2, 0xa9, 0x79, 0x39, 0xae,
		0xc8, 0x90, 0x61, 0x04, 0xcb, 0x57, 0x4a, 0x4b, 0x67, 0x4f, 0xcb, 0x89, 0x4e, 0xc9, 0xa9, 0x79,
		0x79, 0x48, 0x19, 0x86, 0x14, 0x95, 0x2c, 0xac, 0xaf, 0xaf, 0xc8, 0x49, 0x9f, 0x73, 0x63, 0x53,
		0x5d, 0x5e, 0x2b, 0xcb, 0x29, 0x9f, 0xb3, 0xac, 0xae, 0x6f, 0x55, 0x64, 0xf0, 0x19, 0x56, 0x4b,
		0x1b, 0x1b, 0xc5, 0x72, 0x49, 0x4e, 0xfb, 0x1a, 0x0b, 0x2f, 0x6e, 0x96, 0x36, 0xe4, 0x4c, 0x87,
		0x59, 0xa7, 0xe6, 0xe5, 0x61, 0xff, 0x11, 0xa5, 0xb5, 0xad, 0x55, 0x39, 0xab, 0x8c, 0xc2, 0x30,
		0x7b, 0x84, 0x30, 0x62, 0xa4, 0x4b, 0x74, 0xf6, 0xb4, 0x2c, 0xb7, 0x0d, 0x61, 0x2c, 0xa3, 0x1d,
		0x82, 0xb3, 0xa7, 0x65, 0x25, 0xbf, 0x08, 0x71, 0x1a, 0x5d, 0x8a, 0x02, 0xd9, 0x95, 0xe2, 0x42,
		0x69, 0x45, 0x5b, 0xaf, 0x6c, 0x2e, 0xaf, 0xaf, 0x15, 0x57, 0x64, 0xa9, 0x2d, 0x53, 0x4b, 0xbf,
		0xb8, 0xb5, 0xac, 0x96, 0x96, 0xe4, 0x48, 0x50, 0x56, 0x29, 0x15, 0x37, 0x4b, 0x4b, 0x72, 0x34,
		0x7f, 0x1c, 0xc6, 0xfb, 0xe5, 0x99, 0x7e, 0x27, 0x23, 0xff, 0x9e, 0x04, 0x63, 0x7d, 0x52, 0x66,
		0xdf, 0x53, 0x74, 0x11, 0xe2, 0x2c, 0xd2, 0x58, 0x11, 0x39, 0xd6, 0x37, 0xf7, 0xd2, 0xb8, 0xeb,
		0x29, 0x24, 0x14, 0x17, 0x2c, 0xa4, 0xd1, 0x3d, 0x0a, 0x29, 0xa1, 0xe8, 0x09, 0xa7, 0x97, 0x25,
		0xc8, 0xed, 0xc5, 0x1d, 0x72, 0xde, 0x23, 0x1d, 0xe7, 0xfd, 0x42, 0xb7, 0x01, 0x47, 0xf7, 0x5e,
		0x43, 0x8f, 0x15, 0xef, 0x4b, 0x30, 0xd1, 0xbf, 0xdf, 0xe8, 0x6b, 0xc3, 0xb3, 0x90, 0x68, 0x60,
		0x6f, 0xc7, 0x16, 0x35, 0xf7, 0xf1, 0x3e, 0x99, 0x9c, 0x4c, 0x77, 0xfb, 0x8a, 0xa3, 0x82, 0xa5,
		0x20, 0xba, 0x57, 0xd3, 0xc0, 0xac, 0xe9, 0xb1, 0xf4, 0x95, 0x08, 0x3c, 0xd0, 0x97, 0xbc, 0xaf,
		0xa1, 0x0f, 0x03, 0x18, 0x56, 0xb3, 0xe5, 0xb1, 0xba, 0xca, 0xd2, 0x4c, 0x8a, 0x4a, 0xe8, 0x11,
		0x26, 0x29, 0xa4, 0xe5, 0xf9, 0xf3, 0x51, 0x3a, 0x0f, 0x4c, 0x44, 0x15, 0xce, 0xb5, 0x0d, 0x8d,
		0x51, 0x43, 0xa7, 0xf6, 0x58, 0x69, 0x4f, 0xc9, 0x7a, 0x0a, 0x64, 0xdd, 0x34, 0xb0, 0xe5, 0x69,
		0xae, 0xe7, 0x60, 0xd4, 0x30, 0xac, 0x3a, 0xcd, 0xa3, 0xc9, 0x42, 0xbc, 0x86, 0x4c, 0x17, 0xab,
		0x23, 0x6c, 0x7a, 0x43, 0xcc, 0x12, 0x04, 0x2d, 0x16, 0x4e, 0x00, 0x91, 0xe8, 0x40, 0xb0, 0x69,
		0x1f, 0x91, 0xff, 0xdf, 0x21, 0x48, 0x07, 0xba, 0x33, 0xe5, 0x28, 0x64, 0xae, 0xa2, 0xeb, 0x48,
		0x13, 0x1d, 0x37, 0xf3, 0x44, 0x9a, 0xc8, 0x2a, 0xbc, 0xeb, 0x7e, 0x0a, 0xc6, 0xa9, 0x8a, 0xdd,
		0xf2, 0xb0, 0xa3, 0xe9, 0x26, 0x72, 0x5d, 0xea, 0xb4, 0x24, 0x55, 0x55, 0xc8, 0xdc, 0x3a, 0x99,
		0x5a, 0x14, 0x33, 0xca, 0x19, 0x18, 0xa3, 0x88, 0x46, 0xcb, 0xf4, 0x8c, 0xa6, 0x89, 0x35, 0xf2,
		0x0e, 0xe0, 0xd2, 0x7c, 0xea, 0x5b, 0x36, 0x4a, 0x34, 0x56, 0xb9, 0x02, 0xb1, 0xc8, 0x55, 0xca,
		0xf0, 0x30, 0x85, 0xd5, 0xb1, 0x85, 0x1d, 0xe4, 0x61, 0x0d, 0xff, 0x72, 0x0b, 0x99, 0xae, 0x86,
		0xac, 0xaa, 0xb6, 0x83, 0xdc, 0x9d, 0xdc, 0x78, 0x90, 0xe0, 0x08, 0xd1, 0x2d, 0x73, 0xd5, 0x12,
		0xd5, 0x2c, 0x5a, 0xd5, 0xe7, 0x90, 0xbb, 0xa3, 0x14, 0x60, 0x82, 0x12, 0xb9, 0x9e, 0x63, 0x58,
		0x75, 0x4d, 0xdf, 0xc1, 0xfa, 0x35, 0xad, 0xe5, 0xd5, 0xce, 0xe5, 0x1e, 0x0c, 0x32, 0x50, 0x23,
		0x37, 0xa8, 0xce, 0x22, 0x51, 0xd9, 0xf2, 0x6a, 0xe7, 0x94, 0x0d, 0xc8, 0x90, 0xfd, 0x68, 0x18,
		0xb7, 0xb0, 0x56, 0xb3, 0x1d, 0x5a, 0x23, 0xb2, 0x7d, 0x0e, 0x77, 0xc0, 0x89, 0x73, 0xeb, 0x1c,
		0xb0, 0x6a, 0x57, 0x71, 0x21, 0xbe, 0x51, 0x29, 0x95, 0x96, 0xd4, 0xb4, 0x60, 0xb9, 0x64, 0x3b,
		0x24, 0xa6, 0xea, 0xb6, 0xef, 0xe3, 0x34, 0x8b, 0xa9, 0xba, 0x2d, 0x3c, 0x7c, 0x06, 0xc6, 0x74,
		0x9d, 0x2d, 0xdb, 0xd0, 0x35, 0xde, 0xac, 0xbb, 0x39, 0xb9, 0xc3, 0x5f, 0xba, 0x5e, 0x66, 0x0a,
		0x3c, 0xcc, 0x5d, 0xe5, 0x3c, 0x3c, 0xd0, 0xf6, 0x57, 0x10, 0x38, 0xda, 0xb3, 0xca, 0x6e, 0xe8,
		0x19, 0x18, 0x6b, 0xee, 0xf6, 0x02, 0x95, 0x8e, 0x27, 0x36, 0x77, 0xbb, 0x61, 0x8f, 0xd1, 0x17,
		0x30, 0x07, 0xeb, 0xc8, 0xc3, 0xd5, 0xdc, 0xe1, 0xa0, 0x76, 0x60, 0x42, 0x39, 0x01, 0xb2, 0xae,
		0x6b, 0xd8, 0x42, 0xdb, 0x26, 0xd6, 0x90, 0x83, 0x2d, 0xe4, 0xe6, 0xa6, 0x83, 0xca, 0x59, 0x5d,
		0x2f, 0xd1, 0xd9, 0x22, 0x9d, 0x54, 0x8e, 0xc3, 0xa8, 0xbd, 0x7d, 0x55, 0x67, 0xc1, 0xa5, 0x35,
		0x1d, 0x5c, 0x33, 0x6e, 0xe6, 0x1e, 0xa5, 0x6e, 0x1a, 0x21, 0x13, 0x34, 0xb4, 0x2a, 0x54, 0xac,
		0x1c, 0x03, 0x59, 0x77, 0x77, 0x90, 0xd3, 0xa4, 0x45, 0xda, 0x6d, 0x22, 0x1d, 0xe7, 0x1e, 0x63,
		0xaa, 0x4c, 0xbe, 0x26, 0xc4, 0x4a, 0x09, 0xa6, 0xc9, 0xe2, 0x2d, 0x64, 0xd9, 0x5a, 0xcb, 0xc5,
		0x5a, 0xdb, 0x44, 0x7f, 0x2f, 0x1e, 0x27, 0x66, 0xa9, 0x0f, 0x09, 0xb5, 0x2d, 0x17, 0x2f, 0xf9,
		0x4a, 0x62, 0x7b, 0xae, 0xc0, 0x78, 0xcb, 0x32, 0x2c, 0x0f, 0x3b, 0x4d, 0x07, 0x13, 0x30, 0x3b,
		0xb0, 0xb9, 0x6f, 0x0e, 0xed, 0xd1, 0x74, 0x6f, 0x05, 0xb5, 0x59, 0x90, 0xa8, 0x63, 0xad, 0x5e,
		0x61, 0xbe, 0x00, 0x99, 0x60, 0xec, 0x28, 0x29, 0x60, 0xd1, 0x23, 0x4b, 0xa4, 0xa2, 0x2e, 0xae,
		0x2f, 0x91, 0x5a, 0xf8, 0x52, 0x49, 0x8e, 0x90, 0x9a, 0xbc, 0xb2, 0xbc, 0x59, 0xd2, 0xd4, 0xad,
		0xb5, 0xcd, 0xe5, 0xd5, 0x92, 0x1c, 0x3d, 0x9e, 0x4a, 0x7e, 0x6b, 0x48, 0xbe, 0x7d, 0xfb, 0xf6,
		0xed, 0x48, 0xfe, 0x93, 0x08, 0x64, 0x3b, 0xfb, 0x60, 0xe5, 0x17, 0xe0, 0xb0, 0x78, 0x69, 0x75,
		0xb1, 0xa7, 0xdd, 0x30, 0x1c, 0x1a, 0xce, 0x0d, 0xc4, 0x3a, 0x49, 0x7f, 0x27, 0xc6, 0xb9, 0xd6,
		0x06, 0xf6, 0x5e, 0x30, 0x1c, 0x12, 0xac, 0x0d, 0xe4, 0x29, 0x2b, 0x30, 0x6d, 0xd9, 0x9a, 0xeb,
		0x21, 0xab, 0x8a, 0x9c, 0xaa, 0xd6, 0xbe, 0x2e, 0xd0, 0x90, 0xae, 0x63, 0xd7, 0xb5, 0x59, 0x25,
		0xf1, 0x59, 0x1e, 0xb2, 0xec, 0x0d, 0xae, 0xdc, 0x4e, 0xb1, 0x45, 0xae, 0xda, 0x15, 0x35, 0xd1,
		0xbd, 0xa2, 0xe6, 0x41, 0x48, 0x35, 0x50, 0x53, 0xc3, 0x96, 0xe7, 0xec, 0xd2, 0xee, 0x2d, 0xa9,
		0x26, 0x1b, 0xa8, 0x59, 0x22, 0xe3, 0xaf, 0x6e, 0x0f, 0x82, 0x7e, 0xfc, 0xff, 0x28, 0x64, 0x82,
		0x1d, 0x1c, 0x69, 0x88, 0x75, 0x9a, 0xe6, 0x25, 0x9a, 0x05, 0x1e, 0xd9, 0xb7, 0xdf, 0x9b, 0x5b,
		0x24, 0xf9, 0xbf, 0x90, 0x60, 0x7d, 0x95, 0xca, 0x90, 0xa4, 0xf6, 0x92, 0x58, 0xc3, 0xac, 0x5b,
		0x4f, 0xaa, 0x7c, 0xa4, 0x94, 0x21, 0x71, 0xd5, 0xa5, 0xdc, 0x09, 0xca, 0xfd, 0xe8, 0xfe, 0xdc,
		0x97, 0x37, 0x28, 0x79, 0xea, 0xf2, 0x86, 0xb6, 0xb6, 0xae, 0xae, 0x16, 0x57, 0x54, 0x0e, 0x57,
		0x8e, 0x40, 0xcc, 0x44, 0xb7, 0x76, 0x3b, 0x2b, 0x05, 0x15, 0x0d, 0xea, 0xf8, 0x23, 0x10, 0xbb,
		0x81, 0xd1, 0xb5, 0xce, 0xfc, 0x4c, 0x45, 0x5f, 0x61, 0xe8, 0x9f, 0x80, 0x38, 0xf5, 0x97, 0x02,
		0xc0, 0x3d, 0x26, 0x1f, 0x52, 0x92, 0x10, 0x5b, 0x5c, 0x57, 0x49, 0xf8, 0xcb, 0x90, 0x61, 0x52,
		0xad, 0xb2, 0x5c, 0x5a, 0x2c, 0xc9, 0x91, 0xfc, 0x19, 0x48, 0x30, 0x27, 0x90, 0xa3, 0xe1, 0xbb,
		0x41, 0x3e, 0xc4, 0x87, 0x9c, 0x43, 0x12, 0xb3, 0x5b, 0xab, 0x0b, 0x25, 0x55, 0x8e, 0x04, 0xb7,
		0xf7, 0x9f, 0x25, 0x48, 0x07, 0x1a, 0x2a, 0x52, 0xca, 0x91, 0x69, 0xda, 0x37, 0x34, 0x64, 0x1a,
		0xc8, 0xe5, 0xfb, 0x03, 0x54, 0x54, 0x24, 0x92, 0x41, 0xfd, 0xf7, 0x53, 0x89, 0xcd, 0x77, 0x24,
		0x90, 0xbb, 0x9b, 0xb1, 0x2e, 0x03, 0xa5, 0xaf, 0xd5, 0xc0, 0xb7, 0x24, 0xc8, 0x76, 0x76, 0x60,
		0x5d, 0xe6, 0x1d, 0xfd, 0x5a, 0xcd, 0x7b, 0x53, 0x82, 0xe1, 0x8e, 0xbe, 0xeb, 0x67, 0xca, 0xba,
		0x37, 0xa2, 0x30, 0xd6, 0x07, 0xa7, 0x14, 0x79, 0x83, 0xca, 0x7a, 0xe6, 0x9f, 0x1f, 0xe4, 0x59,
		0x73, 0xa4, 0xfe, 0x55, 0x90, 0xe3, 0xf1, 0x7e, 0xf6, 0x18, 0xc8, 0x46, 0x15, 0x5b, 0x9e, 0x51,
		0x33, 0xb0, 0xc3, 0xdf, 0x8d, 0x59, 0xd7, 0x3a, 0xd2, 0x96, 0xb3, 0xd7, 0xe3, 0x9f, 0x03, 0xa5,
		0x69, 0xbb, 0x86, 0x67, 0x5c, 0xc7, 0x9a, 0x61, 0x89, 0x17, 0x69, 0xd2, 0xc5, 0xc6, 0x54, 0x59,
		0xcc, 0x2c, 0x5b, 0x9e, 0xaf, 0x6d, 0xe1, 0x3a, 0xea, 0xd2, 0x26, 0x69, 0x28, 0xaa, 0xca, 0x62,
		0xc6, 0xd7, 0x3e, 0x0a, 0x99, 0xaa, 0xdd, 0x22, 0x0d, 0x01, 0xd3, 0x23, 0x59, 0x4f, 0x52, 0xd3,
		0x4c, 0xe6, 0xab, 0xf0, 0x8e, 0xad, 0xfd, 0x06, 0x9f, 0x51, 0xd3, 0x4c, 0xc6, 0x54, 0x9e, 0x80,
		0x11, 0x54, 0xaf, 0x3b, 0x84, 0x5c, 0x10, 0xb1, 0x36, 0x34, 0xeb, 0x8b, 0xa9, 0xe2, 0xe4, 0x65,
		0x48, 0x0a, 0x3f, 0x90, 0xc2, 0x42, 0x3c, 0xa1, 0x35, 0xd9, 0x3d, 0x4a, 0x84, 0xbc, 0xd4, 0x5b,
		0x62, 0xf2, 0x28, 0x64, 0x0c, 0x57, 0x6b, 0x5f, 0xe8, 0x45, 0x66, 0x22, 0xb3, 0x49, 0x35, 0x6d,
		0xb8, 0xfe, 0x0d, 0x4e, 0xfe, 0xfd, 0x08, 0x64, 0x3b, 0x2f, 0x24, 0x95, 0x25, 0x48, 0x9a, 0xb6,
		0x8e, 0x68, 0x20, 0xb0, 0xdb, 0xf0, 0xd9, 0x90, 0x3b, 0xcc, 0xb9, 0x15, 0xae, 0xaf, 0xfa, 0xc8,
		0xc9, 0xff, 0x92, 0x20, 0x29, 0xc4, 0xca, 0x04, 0xc4, 0x9a, 0xc8, 0xdb, 0xa1, 0x74, 0xf1, 0x85,
		0x88, 0x2c, 0xa9, 0x74, 0x4c, 0xe4, 0x6e, 0x13, 0x59, 0x34, 0x04, 0xb8, 0x9c, 0x8c, 0xc9, 0xbe,
		0x9a, 0x18, 0x55, 0x69, 0x83, 0x6b, 0x37, 0x1a, 0xd8, 0xf2, 0x5c, 0xb1, 0xaf, 0x5c, 0xbe, 0xc8,
		0xc5, 0xca, 0x93, 0x30, 0xea, 0x39, 0xc8, 0x30, 0x3b, 0x74, 0x63, 0x54, 0x57, 0x16, 0x13, 0xbe,
		0x72, 0x01, 0x8e, 0x08, 0xde, 0x2a, 0xf6, 0x90, 0xbe, 0x83, 0xab, 0x6d, 0x50, 0x82, 0xde, 0x76,
		0x1d, 0xe6, 0x0a, 0x4b, 0x7c, 0x5e, 0x60, 0x17, 0xae, 0xc0, 0x98, 0x6e, 0x37, 0xba, 0x3d, 0xb1,
		0x20, 0x77, 0xbd, 0x77, 0xb9, 0xcf, 0x49, 0x2f, 0x41, 0xbb, 0xa9, 0x78, 0x2f, 0x12, 0x2d, 0x57,
		0x16, 0x3e, 0x8c, 0x4c, 0x96, 0x19, 0xae, 0x22, 0x3c, 0xa8, 0xe2, 0x9a, 0x89, 0x75, 0xe2, 0x1d,
		0xf8, 0x93, 0x47, 0xe0, 0xa9, 0xba, 0xe1, 0xed, 0xb4, 0xb6, 0xe7, 0x74, 0xbb, 0x71, 0xa2, 0x81,
		0xaa, 0x86, 0xb7, 0x8b, 0xda, 0x5f, 0x34, 0xea, 0x76, 0xdd, 0xa6, 0x03, 0xfa, 0x17, 0xff, 0xaa,
		0x91, 0xf2, 0xa5, 0x93, 0xa1, 0x9f, 0x40, 0x0a, 0x6b, 0x30, 0xc6, 0x95, 0x35, 0x7a, 0xad, 0xca,
		0xba, 0x50, 0x65, 0xdf, 0x77, 0xf2, 0xdc, 0xc7, 0x9f, 0xd2, 0xaa, 0xa0, 0x8e, 0x72, 0x28, 0x99,
		0x63, 0x7d, 0x6a, 0x41, 0x85, 0x07, 0x3a, 0xf8, 0x58, 0x18, 0x63, 0x27, 0x84, 0xf1, 0x13, 0xce,
		0x38, 0x16, 0x60, 0xdc, 0xe0, 0xd0, 0xc2, 0x22, 0x0c, 0x1f, 0x84, 0xeb, 0xdf, 0x38, 0x57, 0x06,
		0x07, 0x49, 0xca, 0x30, 0x42, 0x49, 0xf4, 0x96, 0xeb, 0xd9, 0x0d, 0x9a, 0x23, 0xf6, 0xa7, 0xf9,
		0xf7, 0x4f, 0x59, 0x5c, 0x65, 0x09, 0x6c, 0xd1, 0x47, 0x15, 0x9e, 0x87, 0x71, 0x22, 0xa1, 0xc7,
		0x30, 0xc8, 0x16, 0x7e, 0x8b, 0x90, 0xfb, 0x9f, 0x97, 0x59, 0xf8, 0x8d, 0xf9, 0x04, 0x01, 0xde,
		0xc0, 0x4e, 0xd4, 0xb1, 0xe7, 0x61, 0xc7, 0xd5, 0x90, 0x69, 0x2a, 0xfb, 0x7e, 0x66, 0xc8, 0xbd,
		0xfe, 0x59, 0xe7, 0x4e, 0x94, 0x19, 0xb2, 0x68, 0x9a, 0x85, 0x2d, 0x38, 0xdc, 0x67, 0x67, 0x07,
		0xe0, 0x7c, 0x83, 0x73, 0x8e, 0xf7, 0xec, 0x2e, 0xa1, 0xad, 0x80, 0x90, 0xfb, 0xfb, 0x31, 0x00,
		0xe7, 0x9b, 0x9c, 0x53, 0xe1, 0x58, 0xb1, 0x2d, 0x84, 0xf1, 0x32, 0x8c, 0x5e, 0xc7, 0xce, 0xb6,
		0xed, 0xf2, 0x57, 0xdf, 0x01, 0xe8, 0xde, 0xe2, 0x74, 0x23, 0x1c, 0x48, 0x5f, 0x84, 0x09, 0xd7,
		0x79, 0x48, 0xd6, 0x90, 0x8e, 0x07, 0xa0, 0x78, 0x9b, 0x53, 0x0c, 0x11, 0x7d, 0x02, 0x2d, 0x42,
		0xa6, 0x6e, 0xf3, 0x4c, 0x1c, 0x0e, 0x7f, 0x87, 0xc3, 0xd3, 0x02, 0xc3, 0x29, 0x9a, 0x76, 0xb3,
		0x65, 0x92, 0x34, 0x1d, 0x4e, 0xf1, 0xc7, 0x82, 0x42, 0x60, 0x38, 0xc5, 0x01, 0xdc, 0xfa, 0xae,
		0xa0, 0x70, 0x03, 0xfe, 0xbc, 0x08, 0x69, 0xdb, 0x32, 0x77, 0x6d, 0x6b, 0x10, 0x23, 0xee, 0x70,
		0x06, 0xe0, 0x10, 0x42, 0x70, 0x01, 0x52, 0x83, 0x6e, 0xc4, 0x9f, 0x72, 0x78, 0x12, 0x8b, 0x1d,
		0x28, 0xc3, 0x88, 0x48, 0x32, 0x86, 0x6d, 0x0d, 0x40, 0xf1, 0x67, 0x9c, 0x22, 0x1b, 0x80, 0xf1,
		0x65, 0x78, 0xd8, 0xf5, 0xea, 0x78, 0x10, 0x92, 0xf7, 0xc5, 0x32, 0x38, 0x84, 0xbb, 0x72, 0x1b,
		0x5b, 0xfa, 0xce, 0x60, 0x0c, 0x1f, 0x08, 0x57, 0x0a, 0x0c, 0xa1, 0x58, 0x84, 0xe1, 0x06, 0x72,
		0xdc, 0x1d, 0x64, 0x0e, 0xb4, 0x1d, 0x7f, 0xce, 0x39, 0x32, 0x3e, 0x88, 0x7b, 0xa4, 0x65, 0x1d,
		0x84, 0xe6, 0x43, 0xe1, 0x91, 0x00, 0x8c, 0x1f, 0x3d, 0xd7, 0xa3, 0xb7, 0x0b, 0x07, 0x61, 0xfb,
		0x0b, 0x71, 0xf4, 0x18, 0x76, 0x35, 0xc8, 0x78, 0x01, 0x52, 0xae, 0x71, 0x6b, 0x20, 0x9a, 0xbf,
		0x14, 0x3b, 0x4d, 0x01, 0x04, 0xfc, 0x22, 0x1c, 0xe9, 0x9b, 0xea, 0x07, 0x20, 0xfb, 0x2b, 0x4e,
		0x36, 0xd1, 0x27, 0xdd, 0xf3, 0x94, 0x70, 0x50, 0xca, 0xbf, 0x16, 0x29, 0x01, 0x77, 0x71, 0x55,
		0x48, 0x27, 0xeb, 0xa2, 0xda, 0xc1, 0xbc, 0xf6, 0x37, 0xc2, 0x6b, 0x0c, 0xdb, 0xe1, 0xb5, 0x4d,
		0x98, 0xe0, 0x8c, 0x07, 0xdb, 0xd7, 0x8f, 0x44, 0x62, 0x65, 0xe8, 0xad, 0xce, 0xdd, 0xfd, 0x25,
		0x98, 0xf4, 0xdd, 0x29, 0x9a, 0x30, 0x57, 0x6b, 0xa0, 0xe6, 0x00, 0xcc, 0x1f, 0x73, 0x66, 0x91,
		0xf1, 0xfd, 0x2e, 0xce, 0x5d, 0x45, 0x4d, 0x42, 0x7e, 0x05, 0x72, 0x82, 0xbc, 0x65, 0x39, 0x58,
		0xb7, 0xeb, 0x96, 0x71, 0x0b, 0x57, 0x07, 0xa0, 0xfe, 0xdb, 0xae, 0xad, 0xda, 0x0a, 0xc0, 0x09,
		0xf3, 0x32, 0xc8, 0x7e, 0xbf, 0xa1, 0x19, 0x8d, 0xa6, 0xed, 0x78, 0x21, 0x8c, 0x7f, 0x27, 0x76,
		0xca, 0xc7, 0x2d, 0x53, 0x58, 0xa1, 0x04, 0x59, 0x3a, 0x1c, 0x34, 0x24, 0xff, 0x9e, 0x13, 0x0d,
		0xb7, 0x51, 0x3c, 0x71, 0xe8, 0x76, 0xa3, 0x89, 0x9c, 0x41, 0xf2, 0xdf, 0x3f, 0x88, 0xc4, 0xc1,
		0x21, 0x2c, 0xfa, 0x46, 0xba, 0x2a, 0xb1, 0x12, 0xf6, 0x05, 0x36, 0xf7, 0x2b, 0xf7, 0xf9, 0x99,
		0xed, 0x2c, 0xc4, 0x85, 0x15, 0xe2, 0x9e, 0xce, 0x72, 0x19, 0x4e, 0xf6, 0xf2, 0x7d, 0xdf, 0x43,
		0x1d, 0xd5, 0xb2, 0x70, 0x09, 0x86, 0x3b, 0x4a, 0x65, 0x38, 0xd5, 0xaf, 0x72, 0xaa, 0x4c, 0xb0,
		0x52, 0x16, 0xce, 0x40, 0x8c, 0x94, 0xbd, 0x70, 0xf8, 0xaf, 0x71, 0x38, 0x55, 0x2f, 0x3c, 0x03,
		0x49, 0x51, 0xee, 0xc2, 0xa1, 0xbf, 0xce, 0xa1, 0x3e, 0x84, 0xc0, 0x45, 0xa9, 0x0b, 0x87, 0xff,
		0x86, 0x80, 0x0b, 0x08, 0x81, 0x0f, 0xee, 0xc2, 0x7f, 0xf9, 0xad, 0x18, 0x4f, 0x57, 0xc2, 0x77,
		0x17, 0x60, 0x88, 0xd7, 0xb8, 0x70, 0xf4, 0x2b, 0xfc, 0xe1, 0x02, 0x51, 0x78, 0x1a, 0xe2, 0x03,
		0x3a, 0xfc, 0xb7, 0x39, 0x94, 0xe9, 0x17, 0x16, 0x21, 0x1d, 0xa8, 0x6b, 0xe1, 0xf0, 0xdf, 0xe1,
		0xf0, 0x20, 0x8a, 0x98, 0xce, 0xeb, 0x5a, 0x38, 0xc1, 0xef, 0x0a, 0xd3, 0x39, 0x82, 0xb8, 0x4d,
		0x94, 0xb4, 0x70, 0xf4, 0xab, 0xc2, 0xeb, 0x02, 0x52, 0xb8, 0x08, 0x29, 0x3f, 0x4d, 0x85, 0xe3,
		0x7f, 0x8f, 0xe3, 0xdb, 0x18, 0xe2, 0x81, 0x40, 0x9a, 0x0c, 0xa7, 0xf8, 0x7d, 0xe1, 0x81, 0x00,
		0x8a, 0x1c, 0xa3, 0xee, 0xd2, 0x17, 0xce, 0xf4, 0x07, 0xe2, 0x18, 0x75, 0x55, 0x3e, 0xb2, 0x9b,
		0x34, 0x5b, 0x84, 0x53, 0xfc, 0xa1, 0xd8, 0x4d, 0xaa, 0x4f, 0xcc, 0xe8, 0xae, 0x25, 0xe1, 0x1c,
		0x7f, 0x24, 0xcc, 0xe8, 0x2a, 0x25, 0x85, 0x0a, 0x28, 0xbd, 0x75, 0x24, 0x9c, 0xef, 0x35, 0xce,
		0x37, 0xda, 0x53, 0x46, 0x0a, 0x2f, 0xc0, 0x44, 0xff, 0x1a, 0x12, 0xce, 0xfa, 0xfa, 0xfd, 0xae,
		0xae, 0x3f, 0x58, 0x42, 0x0a, 0x9b, 0xed, 0xae, 0x3f, 0x58, 0x3f, 0xc2, 0x69, 0xdf, 0xb8, 0xdf,
		0xf9, 0x62, 0x17, 0x2c, 0x1f, 0x85, 0x22, 0x40, 0x3b, 0x75, 0x87, 0x73, 0xbd, 0xc5, 0xb9, 0x02,
		0x20, 0x72, 0x34, 0x78, 0xe6, 0x0e, 0xc7, 0xbf, 0x2d, 0x8e, 0x06, 0x47, 0x14, 0x2e, 0x40, 0xd2,
		0x6a, 0x99, 0x26, 0x09, 0x0e, 0x65, 0xff, 0x5f, 0x35, 0xe4, 0xbe, 0xfd, 0x05, 0x3f, 0x18, 0x02,
		0x50, 0x38, 0x03, 0x71, 0xdc, 0xd8, 0xc6, 0xd5, 0x30, 0xe4, 0x77, 0xbe, 0x10, 0x09, 0x81, 0x68,
		0x17, 0x2e, 0x02, 0xb0, 0x97, 0x46, 0x7a, 0x8d, 0x1d, 0x82, 0xfd, 0xee, 0x17, 0xfc, 0x4b, 0x6b,
		0x1b, 0xd2, 0x26, 0x60, 0xdf, 0x6d, 0xf7, 0x27, 0xf8, 0xac, 0x93, 0x80, 0xbe, 0x68, 0x9e, 0x87,
		0xa1, 0xab, 0xae, 0x6d, 0x79, 0xa8, 0x1e, 0x86, 0xfe, 0x1e, 0x47, 0x0b, 0x7d, 0xe2, 0xb0, 0x86,
		0xed, 0x60, 0x0f, 0xd5, 0xdd, 0x30, 0xec, 0xf7, 0x39, 0xd6, 0x07, 0x10, 0xb0, 0x8e, 0x5c, 0x6f,
		0x90, 0x75, 0xff, 0x40, 0x80, 0x05, 0x80, 0x18, 0x4d, 0xfe, 0xbe, 0x86, 0x77, 0xc3, 0xb0, 0x9f,
		0x0b, 0xa3, 0xb9, 0x7e, 0xe1, 0x19, 0x48, 0x91, 0x3f, 0xd9, 0xaf, 0x0f, 0x42, 0xc0, 0x3f, 0xe4,
		0xe0, 0x36, 0x62, 0xe1, 0x68, 0xff, 0xdb, 0x1d, 0x28, 0xdb, 0x65, 0x9b, 0xdd, 0xeb, 0xc0, 0xe7,
		0x31, 0x38, 0x1c, 0x3c, 0x16, 0x75, 0xc7, 0x6e, 0x35, 0xf9, 0x6d, 0xcc, 0x68, 0xcf, 0xc4, 0xe4,
		0x81, 0xaf, 0x74, 0xf2, 0x16, 0xc0, 0x1a, 0xbe, 0xb1, 0x66, 0x97, 0x09, 0x5e, 0x99, 0x80, 0x04,
		0x35, 0xfa, 0x24, 0xbd, 0xfb, 0x8e, 0xaa, 0x09, 0xfa, 0x0b, 0xbd, 0x93, 0xbe, 0xfc, 0x14, 0xfd,
		0x61, 0x9d, 0xc4, 0xe5, 0xa7, 0x94, 0x3c, 0x48, 0x45, 0x7a, 0x43, 0x99, 0x9e, 0x1f, 0x9f, 0xeb,
		0xb5, 0xb3, 0xa8, 0x4a, 0xa8, 0x90, 0xf9, 0xcd, 0x3b, 0xd3, 0xd2, 0xab, 0x77, 0xa6, 0xa5, 0x77,
		0xef, 0x4c, 0x4b, 0xf9, 0x63, 0x20, 0x15, 0x09, 0x5d, 0x91, 0xf2, 0x89, 0xc7, 0x20, 0x3a, 0xea,
		0x52, 0xfd, 0xcf, 0x08, 0x64, 0xd6, 0xcd, 0xea, 0x0b, 0x86, 0xb7, 0xb3, 0xbf, 0x75, 0xcf, 0x42,
		0x82, 0x3e, 0xef, 0x24, 0xfd, 0xe4, 0x00, 0xf3, 0x8f, 0xf7, 0x31, 0x25, 0x48, 0x34, 0x47, 0xff,
		0x3d, 0xa9, 0x72, 0xd4, 0x9e, 0xab, 0x13, 0xbc, 0xf3, 0xf4, 0x6e, 0x6f, 0x50, 0xde, 0x79, 0xce,
		0x3b, 0x3f, 0x59, 0x81, 0x44, 0xb9, 0xf3, 0x09, 0x7b, 0xf9, 0x75, 0x5e, 0xfc, 0x90, 0x84, 0xca,
		0xe7, 0xf7, 0xb2, 0x68, 0xf2, 0x1c, 0x67, 0x9c, 0x1f, 0x88, 0xb1, 0x8d, 0x9c, 0x5f, 0x98, 0xfd,
		0x8f, 0xbb, 0x53, 0x87, 0xfe, 0xfb, 0xee, 0xd4, 0xa1, 0xff, 0xbb, 0x3b, 0x75, 0xe8, 0x1b, 0x77,
		0xa7, 0xa4, 0xcf, 0xef, 0x4e, 0x49, 0x3f, 0xbe, 0x3b, 0x25, 0xdd, 0xbe, 0x37, 0x25, 0x7d, 0x70,
		0x6f, 0x4a, 0xfa, 0xe8, 0xde, 0x94, 0xf4, 0x4f, 0xf7, 0xa6, 0xa4, 0x9f, 0x04, 0x00, 0x00, 0xff,
		0xff, 0xe4, 0xd8, 0x9f, 0x4a, 0xe0, 0x2c, 0x00, 0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_maditya_protobuf_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (this *NewNoGroup) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NewNoGroup)
	if !ok {
		that2, ok := that.(NewNoGroup)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *NewNoGroup")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NewNoGroup but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NewNoGroup but is not nil && this == nil")
	}
	if this.Field1 != nil && that1.Field1 != nil {
		if *this.Field1 != *that1.Field1 {
			return fmt.Errorf("Field1 this(%v) Not Equal that(%v)", *this.Field1, *that1.Field1)
		}
	} else if this.Field1 != nil {
		return fmt.Errorf("this.Field1 == nil && that.Field1 != nil")
	} else if that1.Field1 != nil {
		return fmt.Errorf("Field1 this(%v) Not Equal that(%v)", this.Field1, that1.Field1)
	}
	if len(this.Field3) != len(that1.Field3) {
		return fmt.Errorf("Field3 this(%v) Not Equal that(%v)", len(this.Field3), len(that1.Field3))
	}
	for i := range this.Field3 {
		if this.Field3[i] != that1.Field3[i] {
			return fmt.Errorf("Field3 this[%v](%v) Not Equal that[%v](%v)", i, this.Field3[i], i, that1.Field3[i])
		}
	}
	if !this.A.Equal(that1.A) {
		return fmt.Errorf("A this(%v) Not Equal that(%v)", this.A, that1.A)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *NewNoGroup) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NewNoGroup)
	if !ok {
		that2, ok := that.(NewNoGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field1 != nil && that1.Field1 != nil {
		if *this.Field1 != *that1.Field1 {
			return false
		}
	} else if this.Field1 != nil {
		return false
	} else if that1.Field1 != nil {
		return false
	}
	if len(this.Field3) != len(that1.Field3) {
		return false
	}
	for i := range this.Field3 {
		if this.Field3[i] != that1.Field3[i] {
			return false
		}
	}
	if !this.A.Equal(that1.A) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *A) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*A)
	if !ok {
		that2, ok := that.(A)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *A")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *A but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *A but is not nil && this == nil")
	}
	if this.AField != nil && that1.AField != nil {
		if *this.AField != *that1.AField {
			return fmt.Errorf("AField this(%v) Not Equal that(%v)", *this.AField, *that1.AField)
		}
	} else if this.AField != nil {
		return fmt.Errorf("this.AField == nil && that.AField != nil")
	} else if that1.AField != nil {
		return fmt.Errorf("AField this(%v) Not Equal that(%v)", this.AField, that1.AField)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *A) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*A)
	if !ok {
		that2, ok := that.(A)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AField != nil && that1.AField != nil {
		if *this.AField != *that1.AField {
			return false
		}
	} else if this.AField != nil {
		return false
	} else if that1.AField != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *OldWithGroup) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OldWithGroup)
	if !ok {
		that2, ok := that.(OldWithGroup)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *OldWithGroup")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OldWithGroup but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OldWithGroup but is not nil && this == nil")
	}
	if this.Field1 != nil && that1.Field1 != nil {
		if *this.Field1 != *that1.Field1 {
			return fmt.Errorf("Field1 this(%v) Not Equal that(%v)", *this.Field1, *that1.Field1)
		}
	} else if this.Field1 != nil {
		return fmt.Errorf("this.Field1 == nil && that.Field1 != nil")
	} else if that1.Field1 != nil {
		return fmt.Errorf("Field1 this(%v) Not Equal that(%v)", this.Field1, that1.Field1)
	}
	if !this.Group1.Equal(that1.Group1) {
		return fmt.Errorf("Group1 this(%v) Not Equal that(%v)", this.Group1, that1.Group1)
	}
	if len(this.Field3) != len(that1.Field3) {
		return fmt.Errorf("Field3 this(%v) Not Equal that(%v)", len(this.Field3), len(that1.Field3))
	}
	for i := range this.Field3 {
		if this.Field3[i] != that1.Field3[i] {
			return fmt.Errorf("Field3 this[%v](%v) Not Equal that[%v](%v)", i, this.Field3[i], i, that1.Field3[i])
		}
	}
	if !this.Group2.Equal(that1.Group2) {
		return fmt.Errorf("Group2 this(%v) Not Equal that(%v)", this.Group2, that1.Group2)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *OldWithGroup) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OldWithGroup)
	if !ok {
		that2, ok := that.(OldWithGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field1 != nil && that1.Field1 != nil {
		if *this.Field1 != *that1.Field1 {
			return false
		}
	} else if this.Field1 != nil {
		return false
	} else if that1.Field1 != nil {
		return false
	}
	if !this.Group1.Equal(that1.Group1) {
		return false
	}
	if len(this.Field3) != len(that1.Field3) {
		return false
	}
	for i := range this.Field3 {
		if this.Field3[i] != that1.Field3[i] {
			return false
		}
	}
	if !this.Group2.Equal(that1.Group2) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *OldWithGroup_Group1) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OldWithGroup_Group1)
	if !ok {
		that2, ok := that.(OldWithGroup_Group1)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *OldWithGroup_Group1")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OldWithGroup_Group1 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OldWithGroup_Group1 but is not nil && this == nil")
	}
	if this.Field1 != nil && that1.Field1 != nil {
		if *this.Field1 != *that1.Field1 {
			return fmt.Errorf("Field1 this(%v) Not Equal that(%v)", *this.Field1, *that1.Field1)
		}
	} else if this.Field1 != nil {
		return fmt.Errorf("this.Field1 == nil && that.Field1 != nil")
	} else if that1.Field1 != nil {
		return fmt.Errorf("Field1 this(%v) Not Equal that(%v)", this.Field1, that1.Field1)
	}
	if this.Field2 != nil && that1.Field2 != nil {
		if *this.Field2 != *that1.Field2 {
			return fmt.Errorf("Field2 this(%v) Not Equal that(%v)", *this.Field2, *that1.Field2)
		}
	} else if this.Field2 != nil {
		return fmt.Errorf("this.Field2 == nil && that.Field2 != nil")
	} else if that1.Field2 != nil {
		return fmt.Errorf("Field2 this(%v) Not Equal that(%v)", this.Field2, that1.Field2)
	}
	if len(this.Field3) != len(that1.Field3) {
		return fmt.Errorf("Field3 this(%v) Not Equal that(%v)", len(this.Field3), len(that1.Field3))
	}
	for i := range this.Field3 {
		if this.Field3[i] != that1.Field3[i] {
			return fmt.Errorf("Field3 this[%v](%v) Not Equal that[%v](%v)", i, this.Field3[i], i, that1.Field3[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *OldWithGroup_Group1) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OldWithGroup_Group1)
	if !ok {
		that2, ok := that.(OldWithGroup_Group1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field1 != nil && that1.Field1 != nil {
		if *this.Field1 != *that1.Field1 {
			return false
		}
	} else if this.Field1 != nil {
		return false
	} else if that1.Field1 != nil {
		return false
	}
	if this.Field2 != nil && that1.Field2 != nil {
		if *this.Field2 != *that1.Field2 {
			return false
		}
	} else if this.Field2 != nil {
		return false
	} else if that1.Field2 != nil {
		return false
	}
	if len(this.Field3) != len(that1.Field3) {
		return false
	}
	for i := range this.Field3 {
		if this.Field3[i] != that1.Field3[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *OldWithGroup_Group2) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OldWithGroup_Group2)
	if !ok {
		that2, ok := that.(OldWithGroup_Group2)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *OldWithGroup_Group2")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OldWithGroup_Group2 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OldWithGroup_Group2 but is not nil && this == nil")
	}
	if this.Field1 != nil && that1.Field1 != nil {
		if *this.Field1 != *that1.Field1 {
			return fmt.Errorf("Field1 this(%v) Not Equal that(%v)", *this.Field1, *that1.Field1)
		}
	} else if this.Field1 != nil {
		return fmt.Errorf("this.Field1 == nil && that.Field1 != nil")
	} else if that1.Field1 != nil {
		return fmt.Errorf("Field1 this(%v) Not Equal that(%v)", this.Field1, that1.Field1)
	}
	if len(this.Field2) != len(that1.Field2) {
		return fmt.Errorf("Field2 this(%v) Not Equal that(%v)", len(this.Field2), len(that1.Field2))
	}
	for i := range this.Field2 {
		if this.Field2[i] != that1.Field2[i] {
			return fmt.Errorf("Field2 this[%v](%v) Not Equal that[%v](%v)", i, this.Field2[i], i, that1.Field2[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *OldWithGroup_Group2) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OldWithGroup_Group2)
	if !ok {
		that2, ok := that.(OldWithGroup_Group2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field1 != nil && that1.Field1 != nil {
		if *this.Field1 != *that1.Field1 {
			return false
		}
	} else if this.Field1 != nil {
		return false
	} else if that1.Field1 != nil {
		return false
	}
	if len(this.Field2) != len(that1.Field2) {
		return false
	}
	for i := range this.Field2 {
		if this.Field2[i] != that1.Field2[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NewNoGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&unrecognizedgroup.NewNoGroup{")
	if this.Field1 != nil {
		s = append(s, "Field1: "+valueToGoStringUnrecognizedgroup(this.Field1, "int64")+",\n")
	}
	if this.Field3 != nil {
		s = append(s, "Field3: "+fmt.Sprintf("%#v", this.Field3)+",\n")
	}
	if this.A != nil {
		s = append(s, "A: "+fmt.Sprintf("%#v", this.A)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *A) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&unrecognizedgroup.A{")
	if this.AField != nil {
		s = append(s, "AField: "+valueToGoStringUnrecognizedgroup(this.AField, "int64")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OldWithGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&unrecognizedgroup.OldWithGroup{")
	if this.Field1 != nil {
		s = append(s, "Field1: "+valueToGoStringUnrecognizedgroup(this.Field1, "int64")+",\n")
	}
	if this.Group1 != nil {
		s = append(s, "Group1: "+fmt.Sprintf("%#v", this.Group1)+",\n")
	}
	if this.Field3 != nil {
		s = append(s, "Field3: "+fmt.Sprintf("%#v", this.Field3)+",\n")
	}
	if this.Group2 != nil {
		s = append(s, "Group2: "+fmt.Sprintf("%#v", this.Group2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OldWithGroup_Group1) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&unrecognizedgroup.OldWithGroup_Group1{")
	if this.Field1 != nil {
		s = append(s, "Field1: "+valueToGoStringUnrecognizedgroup(this.Field1, "int64")+",\n")
	}
	if this.Field2 != nil {
		s = append(s, "Field2: "+valueToGoStringUnrecognizedgroup(this.Field2, "int32")+",\n")
	}
	if this.Field3 != nil {
		s = append(s, "Field3: "+fmt.Sprintf("%#v", this.Field3)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OldWithGroup_Group2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&unrecognizedgroup.OldWithGroup_Group2{")
	if this.Field1 != nil {
		s = append(s, "Field1: "+valueToGoStringUnrecognizedgroup(this.Field1, "int64")+",\n")
	}
	if this.Field2 != nil {
		s = append(s, "Field2: "+fmt.Sprintf("%#v", this.Field2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringUnrecognizedgroup(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringUnrecognizedgroup(m github_com_maditya_protobuf_proto.Message) string {
	e := github_com_maditya_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}
func (m *NewNoGroup) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NewNoGroup) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Field1 != nil {
		data[i] = 0x8
		i++
		i = encodeVarintUnrecognizedgroup(data, i, uint64(*m.Field1))
	}
	if len(m.Field3) > 0 {
		for _, num := range m.Field3 {
			data[i] = 0x19
			i++
			f1 := math.Float64bits(float64(num))
			data[i] = uint8(f1)
			i++
			data[i] = uint8(f1 >> 8)
			i++
			data[i] = uint8(f1 >> 16)
			i++
			data[i] = uint8(f1 >> 24)
			i++
			data[i] = uint8(f1 >> 32)
			i++
			data[i] = uint8(f1 >> 40)
			i++
			data[i] = uint8(f1 >> 48)
			i++
			data[i] = uint8(f1 >> 56)
			i++
		}
	}
	if m.A != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintUnrecognizedgroup(data, i, uint64(m.A.Size()))
		n2, err := m.A.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *A) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *A) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AField != nil {
		data[i] = 0x8
		i++
		i = encodeVarintUnrecognizedgroup(data, i, uint64(*m.AField))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Unrecognizedgroup(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Unrecognizedgroup(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintUnrecognizedgroup(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedNewNoGroup(r randyUnrecognizedgroup, easy bool) *NewNoGroup {
	this := &NewNoGroup{}
	if r.Intn(10) != 0 {
		v1 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v1 *= -1
		}
		this.Field1 = &v1
	}
	if r.Intn(10) != 0 {
		v2 := r.Intn(10)
		this.Field3 = make([]float64, v2)
		for i := 0; i < v2; i++ {
			this.Field3[i] = float64(r.Float64())
			if r.Intn(2) == 0 {
				this.Field3[i] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		this.A = NewPopulatedA(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedUnrecognizedgroup(r, 6)
	}
	return this
}

func NewPopulatedA(r randyUnrecognizedgroup, easy bool) *A {
	this := &A{}
	if r.Intn(10) != 0 {
		v3 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		this.AField = &v3
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedUnrecognizedgroup(r, 2)
	}
	return this
}

func NewPopulatedOldWithGroup(r randyUnrecognizedgroup, easy bool) *OldWithGroup {
	this := &OldWithGroup{}
	if r.Intn(10) != 0 {
		v4 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		this.Field1 = &v4
	}
	if r.Intn(10) != 0 {
		this.Group1 = NewPopulatedOldWithGroup_Group1(r, easy)
	}
	if r.Intn(10) != 0 {
		v5 := r.Intn(10)
		this.Field3 = make([]float64, v5)
		for i := 0; i < v5; i++ {
			this.Field3[i] = float64(r.Float64())
			if r.Intn(2) == 0 {
				this.Field3[i] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		this.Group2 = NewPopulatedOldWithGroup_Group2(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedUnrecognizedgroup(r, 5)
	}
	return this
}

func NewPopulatedOldWithGroup_Group1(r randyUnrecognizedgroup, easy bool) *OldWithGroup_Group1 {
	this := &OldWithGroup_Group1{}
	if r.Intn(10) != 0 {
		v6 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v6 *= -1
		}
		this.Field1 = &v6
	}
	if r.Intn(10) != 0 {
		v7 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v7 *= -1
		}
		this.Field2 = &v7
	}
	if r.Intn(10) != 0 {
		v8 := r.Intn(10)
		this.Field3 = make([]float64, v8)
		for i := 0; i < v8; i++ {
			this.Field3[i] = float64(r.Float64())
			if r.Intn(2) == 0 {
				this.Field3[i] *= -1
			}
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedUnrecognizedgroup(r, 4)
	}
	return this
}

func NewPopulatedOldWithGroup_Group2(r randyUnrecognizedgroup, easy bool) *OldWithGroup_Group2 {
	this := &OldWithGroup_Group2{}
	if r.Intn(10) != 0 {
		v9 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v9 *= -1
		}
		this.Field1 = &v9
	}
	if r.Intn(10) != 0 {
		v10 := r.Intn(10)
		this.Field2 = make([]float64, v10)
		for i := 0; i < v10; i++ {
			this.Field2[i] = float64(r.Float64())
			if r.Intn(2) == 0 {
				this.Field2[i] *= -1
			}
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedUnrecognizedgroup(r, 3)
	}
	return this
}

type randyUnrecognizedgroup interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneUnrecognizedgroup(r randyUnrecognizedgroup) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringUnrecognizedgroup(r randyUnrecognizedgroup) string {
	v11 := r.Intn(100)
	tmps := make([]rune, v11)
	for i := 0; i < v11; i++ {
		tmps[i] = randUTF8RuneUnrecognizedgroup(r)
	}
	return string(tmps)
}
func randUnrecognizedUnrecognizedgroup(r randyUnrecognizedgroup, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldUnrecognizedgroup(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldUnrecognizedgroup(data []byte, r randyUnrecognizedgroup, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateUnrecognizedgroup(data, uint64(key))
		v12 := r.Int63()
		if r.Intn(2) == 0 {
			v12 *= -1
		}
		data = encodeVarintPopulateUnrecognizedgroup(data, uint64(v12))
	case 1:
		data = encodeVarintPopulateUnrecognizedgroup(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateUnrecognizedgroup(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateUnrecognizedgroup(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateUnrecognizedgroup(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateUnrecognizedgroup(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *NewNoGroup) Size() (n int) {
	var l int
	_ = l
	if m.Field1 != nil {
		n += 1 + sovUnrecognizedgroup(uint64(*m.Field1))
	}
	if len(m.Field3) > 0 {
		n += 9 * len(m.Field3)
	}
	if m.A != nil {
		l = m.A.Size()
		n += 1 + l + sovUnrecognizedgroup(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *A) Size() (n int) {
	var l int
	_ = l
	if m.AField != nil {
		n += 1 + sovUnrecognizedgroup(uint64(*m.AField))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovUnrecognizedgroup(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUnrecognizedgroup(x uint64) (n int) {
	return sovUnrecognizedgroup(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *NewNoGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NewNoGroup{`,
		`Field1:` + valueToStringUnrecognizedgroup(this.Field1) + `,`,
		`Field3:` + fmt.Sprintf("%v", this.Field3) + `,`,
		`A:` + strings.Replace(fmt.Sprintf("%v", this.A), "A", "A", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *A) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&A{`,
		`AField:` + valueToStringUnrecognizedgroup(this.AField) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OldWithGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OldWithGroup{`,
		`Field1:` + valueToStringUnrecognizedgroup(this.Field1) + `,`,
		`Group1:` + strings.Replace(fmt.Sprintf("%v", this.Group1), "OldWithGroup_Group1", "OldWithGroup_Group1", 1) + `,`,
		`Field3:` + fmt.Sprintf("%v", this.Field3) + `,`,
		`Group2:` + strings.Replace(fmt.Sprintf("%v", this.Group2), "OldWithGroup_Group2", "OldWithGroup_Group2", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OldWithGroup_Group1) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OldWithGroup_Group1{`,
		`Field1:` + valueToStringUnrecognizedgroup(this.Field1) + `,`,
		`Field2:` + valueToStringUnrecognizedgroup(this.Field2) + `,`,
		`Field3:` + fmt.Sprintf("%v", this.Field3) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OldWithGroup_Group2) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OldWithGroup_Group2{`,
		`Field1:` + valueToStringUnrecognizedgroup(this.Field1) + `,`,
		`Field2:` + fmt.Sprintf("%v", this.Field2) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringUnrecognizedgroup(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *NewNoGroup) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUnrecognizedgroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewNoGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewNoGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field1", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnrecognizedgroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Field1 = &v
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field3", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.Field3 = append(m.Field3, v2)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnrecognizedgroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUnrecognizedgroup
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.A == nil {
				m.A = &A{}
			}
			if err := m.A.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUnrecognizedgroup(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUnrecognizedgroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *A) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUnrecognizedgroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: A: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: A: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AField", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUnrecognizedgroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AField = &v
		default:
			iNdEx = preIndex
			skippy, err := skipUnrecognizedgroup(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUnrecognizedgroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUnrecognizedgroup(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUnrecognizedgroup
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUnrecognizedgroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUnrecognizedgroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthUnrecognizedgroup
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUnrecognizedgroup
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUnrecognizedgroup(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUnrecognizedgroup = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUnrecognizedgroup   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("unrecognizedgroup.proto", fileDescriptorUnrecognizedgroup) }

var fileDescriptorUnrecognizedgroup = []byte{
	// 314 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x2f, 0xcd, 0x2b, 0x4a,
	0x4d, 0xce, 0x4f, 0xcf, 0xcb, 0xac, 0x4a, 0x4d, 0x49, 0x2f, 0xca, 0x2f, 0x2d, 0xd0, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0x12, 0xc4, 0x90, 0x90, 0x32, 0x48, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2,
	0x4b, 0xce, 0xcf, 0xd5, 0xcf, 0x4d, 0x4c, 0xc9, 0x2c, 0xa9, 0x4c, 0xd4, 0x07, 0x2b, 0x4e, 0x2a,
	0x4d, 0xd3, 0x4f, 0xcf, 0x4f, 0xcf, 0x07, 0x73, 0xc0, 0x2c, 0x88, 0x21, 0x4a, 0x79, 0x5c, 0x5c,
	0x7e, 0xa9, 0xe5, 0x7e, 0xf9, 0xee, 0x20, 0xfd, 0x42, 0x62, 0x5c, 0x6c, 0x6e, 0x99, 0xa9, 0x39,
	0x29, 0x86, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xcc, 0x41, 0x6c, 0x69, 0x60, 0x1e, 0x5c, 0xdc, 0x58,
	0x82, 0x59, 0x81, 0x59, 0x83, 0x11, 0x2a, 0x6e, 0x2c, 0xa4, 0xc4, 0xc5, 0xe8, 0x28, 0xc1, 0xaa,
	0xc0, 0xa8, 0xc1, 0x6d, 0x24, 0xa2, 0x87, 0xe9, 0x4e, 0xc7, 0x20, 0xc6, 0x44, 0x2b, 0x9e, 0x8e,
	0x85, 0xf2, 0x8c, 0x13, 0x16, 0xca, 0x33, 0x2e, 0x58, 0x28, 0xcf, 0xa8, 0xa4, 0xc9, 0xc5, 0xe8,
	0x08, 0x32, 0xce, 0x11, 0x6c, 0x1e, 0xcc, 0x9a, 0x44, 0x30, 0x0f, 0x4d, 0xe9, 0x29, 0x26, 0x2e,
	0x1e, 0xff, 0x9c, 0x94, 0xf0, 0xcc, 0x92, 0x0c, 0xfc, 0xae, 0xb3, 0xe3, 0x62, 0x03, 0xdb, 0x67,
	0x28, 0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0x65, 0xa4, 0x86, 0xc5, 0x29, 0xc8, 0x06, 0xe9, 0x81, 0x49,
	0xc3, 0x20, 0xa8, 0x2e, 0x9c, 0xbe, 0x83, 0x99, 0x6b, 0x24, 0xc1, 0x42, 0x82, 0xb9, 0x46, 0x50,
	0x73, 0x8d, 0xa4, 0x02, 0xb8, 0xd8, 0xdc, 0x51, 0x6d, 0xc0, 0x15, 0xae, 0x46, 0x60, 0x97, 0xb3,
	0x42, 0xc5, 0x8d, 0x70, 0xb9, 0x48, 0xca, 0x02, 0x6a, 0xa2, 0x11, 0x51, 0x26, 0x22, 0x74, 0x1a,
	0x39, 0x69, 0x9c, 0x78, 0x28, 0xc7, 0x70, 0xe1, 0xa1, 0x1c, 0xc3, 0x8d, 0x87, 0x72, 0x0c, 0x0f,
	0x1e, 0xca, 0x31, 0x7e, 0x78, 0x28, 0xc7, 0xf8, 0xe3, 0xa1, 0x1c, 0x63, 0xc3, 0x23, 0x39, 0xc6,
	0x15, 0x8f, 0xe4, 0x18, 0x37, 0x3c, 0x92, 0x63, 0xdc, 0xf1, 0x48, 0x8e, 0x11, 0x10, 0x00, 0x00,
	0xff, 0xff, 0x35, 0x75, 0x9b, 0x88, 0x70, 0x02, 0x00, 0x00,
}
