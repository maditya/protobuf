// Code generated by protoc-gen-gogo.
// source: combos/neither/types.proto
// DO NOT EDIT!

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	combos/neither/types.proto

It has these top-level messages:
	KnownTypes
	ProtoTypes
	StdTypes
	RepProtoTypes
	RepStdTypes
	MapProtoTypes
	MapStdTypes
	OneofProtoTypes
	OneofStdTypes
*/
package types

import proto "github.com/maditya/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/maditya/protobuf/gogoproto"
import google_protobuf1 "github.com/maditya/protobuf/types"
import google_protobuf2 "github.com/maditya/protobuf/types"
import google_protobuf3 "github.com/maditya/protobuf/types"

import time "time"
import github_com_gogo_protobuf_types "github.com/maditya/protobuf/types"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type KnownTypes struct {
	Dur   *google_protobuf1.Duration    `protobuf:"bytes,1,opt,name=dur" json:"dur,omitempty"`
	Ts    *google_protobuf2.Timestamp   `protobuf:"bytes,2,opt,name=ts" json:"ts,omitempty"`
	Dbl   *google_protobuf3.DoubleValue `protobuf:"bytes,3,opt,name=dbl" json:"dbl,omitempty"`
	Flt   *google_protobuf3.FloatValue  `protobuf:"bytes,4,opt,name=flt" json:"flt,omitempty"`
	I64   *google_protobuf3.Int64Value  `protobuf:"bytes,5,opt,name=i64" json:"i64,omitempty"`
	U64   *google_protobuf3.UInt64Value `protobuf:"bytes,6,opt,name=u64" json:"u64,omitempty"`
	I32   *google_protobuf3.Int32Value  `protobuf:"bytes,7,opt,name=i32" json:"i32,omitempty"`
	U32   *google_protobuf3.UInt32Value `protobuf:"bytes,8,opt,name=u32" json:"u32,omitempty"`
	Bool  *google_protobuf3.BoolValue   `protobuf:"bytes,9,opt,name=bool" json:"bool,omitempty"`
	Str   *google_protobuf3.StringValue `protobuf:"bytes,10,opt,name=str" json:"str,omitempty"`
	Bytes *google_protobuf3.BytesValue  `protobuf:"bytes,11,opt,name=bytes" json:"bytes,omitempty"`
}

func (m *KnownTypes) Reset()                    { *m = KnownTypes{} }
func (m *KnownTypes) String() string            { return proto.CompactTextString(m) }
func (*KnownTypes) ProtoMessage()               {}
func (*KnownTypes) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func (m *KnownTypes) GetDur() *google_protobuf1.Duration {
	if m != nil {
		return m.Dur
	}
	return nil
}

func (m *KnownTypes) GetTs() *google_protobuf2.Timestamp {
	if m != nil {
		return m.Ts
	}
	return nil
}

func (m *KnownTypes) GetDbl() *google_protobuf3.DoubleValue {
	if m != nil {
		return m.Dbl
	}
	return nil
}

func (m *KnownTypes) GetFlt() *google_protobuf3.FloatValue {
	if m != nil {
		return m.Flt
	}
	return nil
}

func (m *KnownTypes) GetI64() *google_protobuf3.Int64Value {
	if m != nil {
		return m.I64
	}
	return nil
}

func (m *KnownTypes) GetU64() *google_protobuf3.UInt64Value {
	if m != nil {
		return m.U64
	}
	return nil
}

func (m *KnownTypes) GetI32() *google_protobuf3.Int32Value {
	if m != nil {
		return m.I32
	}
	return nil
}

func (m *KnownTypes) GetU32() *google_protobuf3.UInt32Value {
	if m != nil {
		return m.U32
	}
	return nil
}

func (m *KnownTypes) GetBool() *google_protobuf3.BoolValue {
	if m != nil {
		return m.Bool
	}
	return nil
}

func (m *KnownTypes) GetStr() *google_protobuf3.StringValue {
	if m != nil {
		return m.Str
	}
	return nil
}

func (m *KnownTypes) GetBytes() *google_protobuf3.BytesValue {
	if m != nil {
		return m.Bytes
	}
	return nil
}

type ProtoTypes struct {
	NullableTimestamp *google_protobuf2.Timestamp `protobuf:"bytes,1,opt,name=nullableTimestamp" json:"nullableTimestamp,omitempty"`
	NullableDuration  *google_protobuf1.Duration  `protobuf:"bytes,2,opt,name=nullableDuration" json:"nullableDuration,omitempty"`
	Timestamp         google_protobuf2.Timestamp  `protobuf:"bytes,3,opt,name=timestamp" json:"timestamp"`
	Duration          google_protobuf1.Duration   `protobuf:"bytes,4,opt,name=duration" json:"duration"`
}

func (m *ProtoTypes) Reset()                    { *m = ProtoTypes{} }
func (m *ProtoTypes) String() string            { return proto.CompactTextString(m) }
func (*ProtoTypes) ProtoMessage()               {}
func (*ProtoTypes) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *ProtoTypes) GetNullableTimestamp() *google_protobuf2.Timestamp {
	if m != nil {
		return m.NullableTimestamp
	}
	return nil
}

func (m *ProtoTypes) GetNullableDuration() *google_protobuf1.Duration {
	if m != nil {
		return m.NullableDuration
	}
	return nil
}

func (m *ProtoTypes) GetTimestamp() google_protobuf2.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return google_protobuf2.Timestamp{}
}

func (m *ProtoTypes) GetDuration() google_protobuf1.Duration {
	if m != nil {
		return m.Duration
	}
	return google_protobuf1.Duration{}
}

type StdTypes struct {
	NullableStdTime     *time.Time     `protobuf:"bytes,1,opt,name=nullableStdTime,stdtime" json:"nullableStdTime,omitempty"`
	NullableStdDuration *time.Duration `protobuf:"bytes,2,opt,name=nullableStdDuration,stdduration" json:"nullableStdDuration,omitempty"`
	StdTime             time.Time      `protobuf:"bytes,3,opt,name=stdTime,stdtime" json:"stdTime"`
	StdDuration         time.Duration  `protobuf:"bytes,4,opt,name=stdDuration,stdduration" json:"stdDuration"`
}

func (m *StdTypes) Reset()                    { *m = StdTypes{} }
func (m *StdTypes) String() string            { return proto.CompactTextString(m) }
func (*StdTypes) ProtoMessage()               {}
func (*StdTypes) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

func (m *StdTypes) GetNullableStdTime() *time.Time {
	if m != nil {
		return m.NullableStdTime
	}
	return nil
}

func (m *StdTypes) GetNullableStdDuration() *time.Duration {
	if m != nil {
		return m.NullableStdDuration
	}
	return nil
}

func (m *StdTypes) GetStdTime() time.Time {
	if m != nil {
		return m.StdTime
	}
	return time.Time{}
}

func (m *StdTypes) GetStdDuration() time.Duration {
	if m != nil {
		return m.StdDuration
	}
	return 0
}

type RepProtoTypes struct {
	NullableTimestamps []*google_protobuf2.Timestamp `protobuf:"bytes,1,rep,name=nullableTimestamps" json:"nullableTimestamps,omitempty"`
	NullableDurations  []*google_protobuf1.Duration  `protobuf:"bytes,2,rep,name=nullableDurations" json:"nullableDurations,omitempty"`
	Timestamps         []google_protobuf2.Timestamp  `protobuf:"bytes,3,rep,name=timestamps" json:"timestamps"`
	Durations          []google_protobuf1.Duration   `protobuf:"bytes,4,rep,name=durations" json:"durations"`
}

func (m *RepProtoTypes) Reset()                    { *m = RepProtoTypes{} }
func (m *RepProtoTypes) String() string            { return proto.CompactTextString(m) }
func (*RepProtoTypes) ProtoMessage()               {}
func (*RepProtoTypes) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *RepProtoTypes) GetNullableTimestamps() []*google_protobuf2.Timestamp {
	if m != nil {
		return m.NullableTimestamps
	}
	return nil
}

func (m *RepProtoTypes) GetNullableDurations() []*google_protobuf1.Duration {
	if m != nil {
		return m.NullableDurations
	}
	return nil
}

func (m *RepProtoTypes) GetTimestamps() []google_protobuf2.Timestamp {
	if m != nil {
		return m.Timestamps
	}
	return nil
}

func (m *RepProtoTypes) GetDurations() []google_protobuf1.Duration {
	if m != nil {
		return m.Durations
	}
	return nil
}

type RepStdTypes struct {
	//  repeated google.protobuf.Timestamp nullableStdTimes = 1 [(gogoproto.stdtime) = true];
	NullableStdDurations []*time.Duration `protobuf:"bytes,2,rep,name=nullableStdDurations,stdduration" json:"nullableStdDurations,omitempty"`
	//  repeated google.protobuf.Timestamp stdTimes = 3 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
	StdDurations []time.Duration `protobuf:"bytes,4,rep,name=stdDurations,stdduration" json:"stdDurations"`
}

func (m *RepStdTypes) Reset()                    { *m = RepStdTypes{} }
func (m *RepStdTypes) String() string            { return proto.CompactTextString(m) }
func (*RepStdTypes) ProtoMessage()               {}
func (*RepStdTypes) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

func (m *RepStdTypes) GetNullableStdDurations() []*time.Duration {
	if m != nil {
		return m.NullableStdDurations
	}
	return nil
}

func (m *RepStdTypes) GetStdDurations() []time.Duration {
	if m != nil {
		return m.StdDurations
	}
	return nil
}

type MapProtoTypes struct {
	NullableTimestamp map[int32]*google_protobuf2.Timestamp `protobuf:"bytes,1,rep,name=nullableTimestamp" json:"nullableTimestamp,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Timestamp         map[int32]google_protobuf2.Timestamp  `protobuf:"bytes,2,rep,name=timestamp" json:"timestamp" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	NullableDuration  map[int32]*google_protobuf1.Duration  `protobuf:"bytes,3,rep,name=nullableDuration" json:"nullableDuration,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Duration          map[int32]google_protobuf1.Duration   `protobuf:"bytes,4,rep,name=duration" json:"duration" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *MapProtoTypes) Reset()                    { *m = MapProtoTypes{} }
func (m *MapProtoTypes) String() string            { return proto.CompactTextString(m) }
func (*MapProtoTypes) ProtoMessage()               {}
func (*MapProtoTypes) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{5} }

func (m *MapProtoTypes) GetNullableTimestamp() map[int32]*google_protobuf2.Timestamp {
	if m != nil {
		return m.NullableTimestamp
	}
	return nil
}

func (m *MapProtoTypes) GetTimestamp() map[int32]google_protobuf2.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *MapProtoTypes) GetNullableDuration() map[int32]*google_protobuf1.Duration {
	if m != nil {
		return m.NullableDuration
	}
	return nil
}

func (m *MapProtoTypes) GetDuration() map[int32]google_protobuf1.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

type MapStdTypes struct {
	NullableTimestamp map[int32]*time.Time     `protobuf:"bytes,1,rep,name=nullableTimestamp,stdtime" json:"nullableTimestamp,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Timestamp         map[int32]time.Time      `protobuf:"bytes,2,rep,name=timestamp,stdtime" json:"timestamp" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	NullableDuration  map[int32]*time.Duration `protobuf:"bytes,3,rep,name=nullableDuration,stdduration" json:"nullableDuration,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Duration          map[int32]time.Duration  `protobuf:"bytes,4,rep,name=duration,stdduration" json:"duration" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *MapStdTypes) Reset()                    { *m = MapStdTypes{} }
func (m *MapStdTypes) String() string            { return proto.CompactTextString(m) }
func (*MapStdTypes) ProtoMessage()               {}
func (*MapStdTypes) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{6} }

func (m *MapStdTypes) GetNullableTimestamp() map[int32]*time.Time {
	if m != nil {
		return m.NullableTimestamp
	}
	return nil
}

func (m *MapStdTypes) GetTimestamp() map[int32]time.Time {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *MapStdTypes) GetNullableDuration() map[int32]*time.Duration {
	if m != nil {
		return m.NullableDuration
	}
	return nil
}

func (m *MapStdTypes) GetDuration() map[int32]time.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

type OneofProtoTypes struct {
	// Types that are valid to be assigned to OneOfProtoTimes:
	//	*OneofProtoTypes_Timestamp
	//	*OneofProtoTypes_Duration
	OneOfProtoTimes isOneofProtoTypes_OneOfProtoTimes `protobuf_oneof:"OneOfProtoTimes"`
}

func (m *OneofProtoTypes) Reset()                    { *m = OneofProtoTypes{} }
func (m *OneofProtoTypes) String() string            { return proto.CompactTextString(m) }
func (*OneofProtoTypes) ProtoMessage()               {}
func (*OneofProtoTypes) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{7} }

type isOneofProtoTypes_OneOfProtoTimes interface {
	isOneofProtoTypes_OneOfProtoTimes()
	Equal(interface{}) bool
	VerboseEqual(interface{}) error
	Size() int
}

type OneofProtoTypes_Timestamp struct {
	Timestamp *google_protobuf2.Timestamp `protobuf:"bytes,1,opt,name=timestamp,oneof"`
}
type OneofProtoTypes_Duration struct {
	Duration *google_protobuf1.Duration `protobuf:"bytes,2,opt,name=duration,oneof"`
}

func (*OneofProtoTypes_Timestamp) isOneofProtoTypes_OneOfProtoTimes() {}
func (*OneofProtoTypes_Duration) isOneofProtoTypes_OneOfProtoTimes()  {}

func (m *OneofProtoTypes) GetOneOfProtoTimes() isOneofProtoTypes_OneOfProtoTimes {
	if m != nil {
		return m.OneOfProtoTimes
	}
	return nil
}

func (m *OneofProtoTypes) GetTimestamp() *google_protobuf2.Timestamp {
	if x, ok := m.GetOneOfProtoTimes().(*OneofProtoTypes_Timestamp); ok {
		return x.Timestamp
	}
	return nil
}

func (m *OneofProtoTypes) GetDuration() *google_protobuf1.Duration {
	if x, ok := m.GetOneOfProtoTimes().(*OneofProtoTypes_Duration); ok {
		return x.Duration
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*OneofProtoTypes) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _OneofProtoTypes_OneofMarshaler, _OneofProtoTypes_OneofUnmarshaler, _OneofProtoTypes_OneofSizer, []interface{}{
		(*OneofProtoTypes_Timestamp)(nil),
		(*OneofProtoTypes_Duration)(nil),
	}
}

func _OneofProtoTypes_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*OneofProtoTypes)
	// OneOfProtoTimes
	switch x := m.OneOfProtoTimes.(type) {
	case *OneofProtoTypes_Timestamp:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Timestamp); err != nil {
			return err
		}
	case *OneofProtoTypes_Duration:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Duration); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("OneofProtoTypes.OneOfProtoTimes has unexpected type %T", x)
	}
	return nil
}

func _OneofProtoTypes_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*OneofProtoTypes)
	switch tag {
	case 1: // OneOfProtoTimes.timestamp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf2.Timestamp)
		err := b.DecodeMessage(msg)
		m.OneOfProtoTimes = &OneofProtoTypes_Timestamp{msg}
		return true, err
	case 2: // OneOfProtoTimes.duration
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.Duration)
		err := b.DecodeMessage(msg)
		m.OneOfProtoTimes = &OneofProtoTypes_Duration{msg}
		return true, err
	default:
		return false, nil
	}
}

func _OneofProtoTypes_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*OneofProtoTypes)
	// OneOfProtoTimes
	switch x := m.OneOfProtoTimes.(type) {
	case *OneofProtoTypes_Timestamp:
		s := proto.Size(x.Timestamp)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OneofProtoTypes_Duration:
		s := proto.Size(x.Duration)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type OneofStdTypes struct {
	// Types that are valid to be assigned to OneOfStdTimes:
	//	*OneofStdTypes_Timestamp
	//	*OneofStdTypes_Duration
	OneOfStdTimes isOneofStdTypes_OneOfStdTimes `protobuf_oneof:"OneOfStdTimes"`
}

func (m *OneofStdTypes) Reset()                    { *m = OneofStdTypes{} }
func (m *OneofStdTypes) String() string            { return proto.CompactTextString(m) }
func (*OneofStdTypes) ProtoMessage()               {}
func (*OneofStdTypes) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{8} }

type isOneofStdTypes_OneOfStdTimes interface {
	isOneofStdTypes_OneOfStdTimes()
	Equal(interface{}) bool
	VerboseEqual(interface{}) error
	Size() int
}

type OneofStdTypes_Timestamp struct {
	Timestamp *time.Time `protobuf:"bytes,1,opt,name=timestamp,oneof,stdtime"`
}
type OneofStdTypes_Duration struct {
	Duration *time.Duration `protobuf:"bytes,2,opt,name=duration,oneof,stdduration"`
}

func (*OneofStdTypes_Timestamp) isOneofStdTypes_OneOfStdTimes() {}
func (*OneofStdTypes_Duration) isOneofStdTypes_OneOfStdTimes()  {}

func (m *OneofStdTypes) GetOneOfStdTimes() isOneofStdTypes_OneOfStdTimes {
	if m != nil {
		return m.OneOfStdTimes
	}
	return nil
}

func (m *OneofStdTypes) GetTimestamp() *time.Time {
	if x, ok := m.GetOneOfStdTimes().(*OneofStdTypes_Timestamp); ok {
		return x.Timestamp
	}
	return nil
}

func (m *OneofStdTypes) GetDuration() *time.Duration {
	if x, ok := m.GetOneOfStdTimes().(*OneofStdTypes_Duration); ok {
		return x.Duration
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*OneofStdTypes) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _OneofStdTypes_OneofMarshaler, _OneofStdTypes_OneofUnmarshaler, _OneofStdTypes_OneofSizer, []interface{}{
		(*OneofStdTypes_Timestamp)(nil),
		(*OneofStdTypes_Duration)(nil),
	}
}

func _OneofStdTypes_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*OneofStdTypes)
	// OneOfStdTimes
	switch x := m.OneOfStdTimes.(type) {
	case *OneofStdTypes_Timestamp:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		data, err := github_com_gogo_protobuf_types.StdTimeMarshal(*x.Timestamp)
		if err != nil {
			return err
		}
		if err := b.EncodeRawBytes(data); err != nil {
			return err
		}
	case *OneofStdTypes_Duration:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		data, err := github_com_gogo_protobuf_types.StdDurationMarshal(*x.Duration)
		if err != nil {
			return err
		}
		if err := b.EncodeRawBytes(data); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("OneofStdTypes.OneOfStdTimes has unexpected type %T", x)
	}
	return nil
}

func _OneofStdTypes_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*OneofStdTypes)
	switch tag {
	case 1: // OneOfStdTimes.timestamp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		if err != nil {
			return true, err
		}
		c := new(time.Time)
		if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(c, x); err != nil {
			return true, err
		}
		m.OneOfStdTimes = &OneofStdTypes_Timestamp{c}
		return true, err
	case 2: // OneOfStdTimes.duration
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		if err != nil {
			return true, err
		}
		c := new(time.Duration)
		if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(c, x); err != nil {
			return true, err
		}
		m.OneOfStdTimes = &OneofStdTypes_Duration{c}
		return true, err
	default:
		return false, nil
	}
}

func _OneofStdTypes_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*OneofStdTypes)
	// OneOfStdTimes
	switch x := m.OneOfStdTimes.(type) {
	case *OneofStdTypes_Timestamp:
		s := github_com_gogo_protobuf_types.SizeOfStdTime(*x.Timestamp)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OneofStdTypes_Duration:
		s := github_com_gogo_protobuf_types.SizeOfStdDuration(*x.Duration)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*KnownTypes)(nil), "types.KnownTypes")
	proto.RegisterType((*ProtoTypes)(nil), "types.ProtoTypes")
	proto.RegisterType((*StdTypes)(nil), "types.StdTypes")
	proto.RegisterType((*RepProtoTypes)(nil), "types.RepProtoTypes")
	proto.RegisterType((*RepStdTypes)(nil), "types.RepStdTypes")
	proto.RegisterType((*MapProtoTypes)(nil), "types.MapProtoTypes")
	proto.RegisterType((*MapStdTypes)(nil), "types.MapStdTypes")
	proto.RegisterType((*OneofProtoTypes)(nil), "types.OneofProtoTypes")
	proto.RegisterType((*OneofStdTypes)(nil), "types.OneofStdTypes")
}
func (this *KnownTypes) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*KnownTypes)
	if !ok {
		that2, ok := that.(KnownTypes)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *KnownTypes")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *KnownTypes but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *KnownTypes but is not nil && this == nil")
	}
	if !this.Dur.Equal(that1.Dur) {
		return fmt.Errorf("Dur this(%v) Not Equal that(%v)", this.Dur, that1.Dur)
	}
	if !this.Ts.Equal(that1.Ts) {
		return fmt.Errorf("Ts this(%v) Not Equal that(%v)", this.Ts, that1.Ts)
	}
	if !this.Dbl.Equal(that1.Dbl) {
		return fmt.Errorf("Dbl this(%v) Not Equal that(%v)", this.Dbl, that1.Dbl)
	}
	if !this.Flt.Equal(that1.Flt) {
		return fmt.Errorf("Flt this(%v) Not Equal that(%v)", this.Flt, that1.Flt)
	}
	if !this.I64.Equal(that1.I64) {
		return fmt.Errorf("I64 this(%v) Not Equal that(%v)", this.I64, that1.I64)
	}
	if !this.U64.Equal(that1.U64) {
		return fmt.Errorf("U64 this(%v) Not Equal that(%v)", this.U64, that1.U64)
	}
	if !this.I32.Equal(that1.I32) {
		return fmt.Errorf("I32 this(%v) Not Equal that(%v)", this.I32, that1.I32)
	}
	if !this.U32.Equal(that1.U32) {
		return fmt.Errorf("U32 this(%v) Not Equal that(%v)", this.U32, that1.U32)
	}
	if !this.Bool.Equal(that1.Bool) {
		return fmt.Errorf("Bool this(%v) Not Equal that(%v)", this.Bool, that1.Bool)
	}
	if !this.Str.Equal(that1.Str) {
		return fmt.Errorf("Str this(%v) Not Equal that(%v)", this.Str, that1.Str)
	}
	if !this.Bytes.Equal(that1.Bytes) {
		return fmt.Errorf("Bytes this(%v) Not Equal that(%v)", this.Bytes, that1.Bytes)
	}
	return nil
}
func (this *KnownTypes) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*KnownTypes)
	if !ok {
		that2, ok := that.(KnownTypes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Dur.Equal(that1.Dur) {
		return false
	}
	if !this.Ts.Equal(that1.Ts) {
		return false
	}
	if !this.Dbl.Equal(that1.Dbl) {
		return false
	}
	if !this.Flt.Equal(that1.Flt) {
		return false
	}
	if !this.I64.Equal(that1.I64) {
		return false
	}
	if !this.U64.Equal(that1.U64) {
		return false
	}
	if !this.I32.Equal(that1.I32) {
		return false
	}
	if !this.U32.Equal(that1.U32) {
		return false
	}
	if !this.Bool.Equal(that1.Bool) {
		return false
	}
	if !this.Str.Equal(that1.Str) {
		return false
	}
	if !this.Bytes.Equal(that1.Bytes) {
		return false
	}
	return true
}
func (this *ProtoTypes) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ProtoTypes)
	if !ok {
		that2, ok := that.(ProtoTypes)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ProtoTypes")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ProtoTypes but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ProtoTypes but is not nil && this == nil")
	}
	if !this.NullableTimestamp.Equal(that1.NullableTimestamp) {
		return fmt.Errorf("NullableTimestamp this(%v) Not Equal that(%v)", this.NullableTimestamp, that1.NullableTimestamp)
	}
	if !this.NullableDuration.Equal(that1.NullableDuration) {
		return fmt.Errorf("NullableDuration this(%v) Not Equal that(%v)", this.NullableDuration, that1.NullableDuration)
	}
	if !this.Timestamp.Equal(&that1.Timestamp) {
		return fmt.Errorf("Timestamp this(%v) Not Equal that(%v)", this.Timestamp, that1.Timestamp)
	}
	if !this.Duration.Equal(&that1.Duration) {
		return fmt.Errorf("Duration this(%v) Not Equal that(%v)", this.Duration, that1.Duration)
	}
	return nil
}
func (this *ProtoTypes) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ProtoTypes)
	if !ok {
		that2, ok := that.(ProtoTypes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.NullableTimestamp.Equal(that1.NullableTimestamp) {
		return false
	}
	if !this.NullableDuration.Equal(that1.NullableDuration) {
		return false
	}
	if !this.Timestamp.Equal(&that1.Timestamp) {
		return false
	}
	if !this.Duration.Equal(&that1.Duration) {
		return false
	}
	return true
}
func (this *StdTypes) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*StdTypes)
	if !ok {
		that2, ok := that.(StdTypes)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *StdTypes")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *StdTypes but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *StdTypes but is not nil && this == nil")
	}
	if that1.NullableStdTime == nil {
		if this.NullableStdTime != nil {
			return fmt.Errorf("this.NullableStdTime != nil && that1.NullableStdTime == nil")
		}
	} else if !this.NullableStdTime.Equal(*that1.NullableStdTime) {
		return fmt.Errorf("NullableStdTime this(%v) Not Equal that(%v)", this.NullableStdTime, that1.NullableStdTime)
	}
	if this.NullableStdDuration != nil && that1.NullableStdDuration != nil {
		if *this.NullableStdDuration != *that1.NullableStdDuration {
			return fmt.Errorf("NullableStdDuration this(%v) Not Equal that(%v)", *this.NullableStdDuration, *that1.NullableStdDuration)
		}
	} else if this.NullableStdDuration != nil {
		return fmt.Errorf("this.NullableStdDuration == nil && that.NullableStdDuration != nil")
	} else if that1.NullableStdDuration != nil {
		return fmt.Errorf("NullableStdDuration this(%v) Not Equal that(%v)", this.NullableStdDuration, that1.NullableStdDuration)
	}
	if !this.StdTime.Equal(that1.StdTime) {
		return fmt.Errorf("StdTime this(%v) Not Equal that(%v)", this.StdTime, that1.StdTime)
	}
	if this.StdDuration != that1.StdDuration {
		return fmt.Errorf("StdDuration this(%v) Not Equal that(%v)", this.StdDuration, that1.StdDuration)
	}
	return nil
}
func (this *StdTypes) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*StdTypes)
	if !ok {
		that2, ok := that.(StdTypes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.NullableStdTime == nil {
		if this.NullableStdTime != nil {
			return false
		}
	} else if !this.NullableStdTime.Equal(*that1.NullableStdTime) {
		return false
	}
	if this.NullableStdDuration != nil && that1.NullableStdDuration != nil {
		if *this.NullableStdDuration != *that1.NullableStdDuration {
			return false
		}
	} else if this.NullableStdDuration != nil {
		return false
	} else if that1.NullableStdDuration != nil {
		return false
	}
	if !this.StdTime.Equal(that1.StdTime) {
		return false
	}
	if this.StdDuration != that1.StdDuration {
		return false
	}
	return true
}
func (this *RepProtoTypes) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RepProtoTypes)
	if !ok {
		that2, ok := that.(RepProtoTypes)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RepProtoTypes")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RepProtoTypes but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RepProtoTypes but is not nil && this == nil")
	}
	if len(this.NullableTimestamps) != len(that1.NullableTimestamps) {
		return fmt.Errorf("NullableTimestamps this(%v) Not Equal that(%v)", len(this.NullableTimestamps), len(that1.NullableTimestamps))
	}
	for i := range this.NullableTimestamps {
		if !this.NullableTimestamps[i].Equal(that1.NullableTimestamps[i]) {
			return fmt.Errorf("NullableTimestamps this[%v](%v) Not Equal that[%v](%v)", i, this.NullableTimestamps[i], i, that1.NullableTimestamps[i])
		}
	}
	if len(this.NullableDurations) != len(that1.NullableDurations) {
		return fmt.Errorf("NullableDurations this(%v) Not Equal that(%v)", len(this.NullableDurations), len(that1.NullableDurations))
	}
	for i := range this.NullableDurations {
		if !this.NullableDurations[i].Equal(that1.NullableDurations[i]) {
			return fmt.Errorf("NullableDurations this[%v](%v) Not Equal that[%v](%v)", i, this.NullableDurations[i], i, that1.NullableDurations[i])
		}
	}
	if len(this.Timestamps) != len(that1.Timestamps) {
		return fmt.Errorf("Timestamps this(%v) Not Equal that(%v)", len(this.Timestamps), len(that1.Timestamps))
	}
	for i := range this.Timestamps {
		if !this.Timestamps[i].Equal(&that1.Timestamps[i]) {
			return fmt.Errorf("Timestamps this[%v](%v) Not Equal that[%v](%v)", i, this.Timestamps[i], i, that1.Timestamps[i])
		}
	}
	if len(this.Durations) != len(that1.Durations) {
		return fmt.Errorf("Durations this(%v) Not Equal that(%v)", len(this.Durations), len(that1.Durations))
	}
	for i := range this.Durations {
		if !this.Durations[i].Equal(&that1.Durations[i]) {
			return fmt.Errorf("Durations this[%v](%v) Not Equal that[%v](%v)", i, this.Durations[i], i, that1.Durations[i])
		}
	}
	return nil
}
func (this *RepProtoTypes) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RepProtoTypes)
	if !ok {
		that2, ok := that.(RepProtoTypes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.NullableTimestamps) != len(that1.NullableTimestamps) {
		return false
	}
	for i := range this.NullableTimestamps {
		if !this.NullableTimestamps[i].Equal(that1.NullableTimestamps[i]) {
			return false
		}
	}
	if len(this.NullableDurations) != len(that1.NullableDurations) {
		return false
	}
	for i := range this.NullableDurations {
		if !this.NullableDurations[i].Equal(that1.NullableDurations[i]) {
			return false
		}
	}
	if len(this.Timestamps) != len(that1.Timestamps) {
		return false
	}
	for i := range this.Timestamps {
		if !this.Timestamps[i].Equal(&that1.Timestamps[i]) {
			return false
		}
	}
	if len(this.Durations) != len(that1.Durations) {
		return false
	}
	for i := range this.Durations {
		if !this.Durations[i].Equal(&that1.Durations[i]) {
			return false
		}
	}
	return true
}
func (this *RepStdTypes) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RepStdTypes)
	if !ok {
		that2, ok := that.(RepStdTypes)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RepStdTypes")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RepStdTypes but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RepStdTypes but is not nil && this == nil")
	}
	if len(this.NullableStdDurations) != len(that1.NullableStdDurations) {
		return fmt.Errorf("NullableStdDurations this(%v) Not Equal that(%v)", len(this.NullableStdDurations), len(that1.NullableStdDurations))
	}
	for i := range this.NullableStdDurations {
		if dthis, dthat := this.NullableStdDurations[i], that1.NullableStdDurations[i]; (dthis != nil && dthat != nil && *dthis != *dthat) || (dthis != nil && dthat == nil) || (dthis == nil && dthat != nil) {
			return fmt.Errorf("NullableStdDurations this[%v](%v) Not Equal that[%v](%v)", i, this.NullableStdDurations[i], i, that1.NullableStdDurations[i])
		}
	}
	if len(this.StdDurations) != len(that1.StdDurations) {
		return fmt.Errorf("StdDurations this(%v) Not Equal that(%v)", len(this.StdDurations), len(that1.StdDurations))
	}
	for i := range this.StdDurations {
		if this.StdDurations[i] != that1.StdDurations[i] {
			return fmt.Errorf("StdDurations this[%v](%v) Not Equal that[%v](%v)", i, this.StdDurations[i], i, that1.StdDurations[i])
		}
	}
	return nil
}
func (this *RepStdTypes) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RepStdTypes)
	if !ok {
		that2, ok := that.(RepStdTypes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.NullableStdDurations) != len(that1.NullableStdDurations) {
		return false
	}
	for i := range this.NullableStdDurations {
		if dthis, dthat := this.NullableStdDurations[i], that1.NullableStdDurations[i]; (dthis != nil && dthat != nil && *dthis != *dthat) || (dthis != nil && dthat == nil) || (dthis == nil && dthat != nil) {
			return false
		}
	}
	if len(this.StdDurations) != len(that1.StdDurations) {
		return false
	}
	for i := range this.StdDurations {
		if this.StdDurations[i] != that1.StdDurations[i] {
			return false
		}
	}
	return true
}
func (this *MapProtoTypes) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MapProtoTypes)
	if !ok {
		that2, ok := that.(MapProtoTypes)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MapProtoTypes")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MapProtoTypes but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MapProtoTypes but is not nil && this == nil")
	}
	if len(this.NullableTimestamp) != len(that1.NullableTimestamp) {
		return fmt.Errorf("NullableTimestamp this(%v) Not Equal that(%v)", len(this.NullableTimestamp), len(that1.NullableTimestamp))
	}
	for i := range this.NullableTimestamp {
		if !this.NullableTimestamp[i].Equal(that1.NullableTimestamp[i]) {
			return fmt.Errorf("NullableTimestamp this[%v](%v) Not Equal that[%v](%v)", i, this.NullableTimestamp[i], i, that1.NullableTimestamp[i])
		}
	}
	if len(this.Timestamp) != len(that1.Timestamp) {
		return fmt.Errorf("Timestamp this(%v) Not Equal that(%v)", len(this.Timestamp), len(that1.Timestamp))
	}
	for i := range this.Timestamp {
		a := this.Timestamp[i]
		b := that1.Timestamp[i]
		if !(&a).Equal(&b) {
			return fmt.Errorf("Timestamp this[%v](%v) Not Equal that[%v](%v)", i, this.Timestamp[i], i, that1.Timestamp[i])
		}
	}
	if len(this.NullableDuration) != len(that1.NullableDuration) {
		return fmt.Errorf("NullableDuration this(%v) Not Equal that(%v)", len(this.NullableDuration), len(that1.NullableDuration))
	}
	for i := range this.NullableDuration {
		if !this.NullableDuration[i].Equal(that1.NullableDuration[i]) {
			return fmt.Errorf("NullableDuration this[%v](%v) Not Equal that[%v](%v)", i, this.NullableDuration[i], i, that1.NullableDuration[i])
		}
	}
	if len(this.Duration) != len(that1.Duration) {
		return fmt.Errorf("Duration this(%v) Not Equal that(%v)", len(this.Duration), len(that1.Duration))
	}
	for i := range this.Duration {
		a := this.Duration[i]
		b := that1.Duration[i]
		if !(&a).Equal(&b) {
			return fmt.Errorf("Duration this[%v](%v) Not Equal that[%v](%v)", i, this.Duration[i], i, that1.Duration[i])
		}
	}
	return nil
}
func (this *MapProtoTypes) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MapProtoTypes)
	if !ok {
		that2, ok := that.(MapProtoTypes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.NullableTimestamp) != len(that1.NullableTimestamp) {
		return false
	}
	for i := range this.NullableTimestamp {
		if !this.NullableTimestamp[i].Equal(that1.NullableTimestamp[i]) {
			return false
		}
	}
	if len(this.Timestamp) != len(that1.Timestamp) {
		return false
	}
	for i := range this.Timestamp {
		a := this.Timestamp[i]
		b := that1.Timestamp[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	if len(this.NullableDuration) != len(that1.NullableDuration) {
		return false
	}
	for i := range this.NullableDuration {
		if !this.NullableDuration[i].Equal(that1.NullableDuration[i]) {
			return false
		}
	}
	if len(this.Duration) != len(that1.Duration) {
		return false
	}
	for i := range this.Duration {
		a := this.Duration[i]
		b := that1.Duration[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	return true
}
func (this *MapStdTypes) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MapStdTypes)
	if !ok {
		that2, ok := that.(MapStdTypes)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MapStdTypes")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MapStdTypes but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MapStdTypes but is not nil && this == nil")
	}
	if len(this.NullableTimestamp) != len(that1.NullableTimestamp) {
		return fmt.Errorf("NullableTimestamp this(%v) Not Equal that(%v)", len(this.NullableTimestamp), len(that1.NullableTimestamp))
	}
	for i := range this.NullableTimestamp {
		if !this.NullableTimestamp[i].Equal(*that1.NullableTimestamp[i]) {
			return fmt.Errorf("NullableTimestamp this[%v](%v) Not Equal that[%v](%v)", i, this.NullableTimestamp[i], i, that1.NullableTimestamp[i])
		}
	}
	if len(this.Timestamp) != len(that1.Timestamp) {
		return fmt.Errorf("Timestamp this(%v) Not Equal that(%v)", len(this.Timestamp), len(that1.Timestamp))
	}
	for i := range this.Timestamp {
		if !this.Timestamp[i].Equal(that1.Timestamp[i]) {
			return fmt.Errorf("Timestamp this[%v](%v) Not Equal that[%v](%v)", i, this.Timestamp[i], i, that1.Timestamp[i])
		}
	}
	if len(this.NullableDuration) != len(that1.NullableDuration) {
		return fmt.Errorf("NullableDuration this(%v) Not Equal that(%v)", len(this.NullableDuration), len(that1.NullableDuration))
	}
	for i := range this.NullableDuration {
		if dthis, dthat := this.NullableDuration[i], that1.NullableDuration[i]; (dthis != nil && dthat != nil && *dthis != *dthat) || (dthis != nil && dthat == nil) || (dthis == nil && dthat != nil) {
			return fmt.Errorf("NullableDuration this[%v](%v) Not Equal that[%v](%v)", i, this.NullableDuration[i], i, that1.NullableDuration[i])
		}
	}
	if len(this.Duration) != len(that1.Duration) {
		return fmt.Errorf("Duration this(%v) Not Equal that(%v)", len(this.Duration), len(that1.Duration))
	}
	for i := range this.Duration {
		if this.Duration[i] != that1.Duration[i] {
			return fmt.Errorf("Duration this[%v](%v) Not Equal that[%v](%v)", i, this.Duration[i], i, that1.Duration[i])
		}
	}
	return nil
}
func (this *MapStdTypes) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MapStdTypes)
	if !ok {
		that2, ok := that.(MapStdTypes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.NullableTimestamp) != len(that1.NullableTimestamp) {
		return false
	}
	for i := range this.NullableTimestamp {
		if !this.NullableTimestamp[i].Equal(*that1.NullableTimestamp[i]) {
			return false
		}
	}
	if len(this.Timestamp) != len(that1.Timestamp) {
		return false
	}
	for i := range this.Timestamp {
		if !this.Timestamp[i].Equal(that1.Timestamp[i]) {
			return false
		}
	}
	if len(this.NullableDuration) != len(that1.NullableDuration) {
		return false
	}
	for i := range this.NullableDuration {
		if dthis, dthat := this.NullableDuration[i], that1.NullableDuration[i]; (dthis != nil && dthat != nil && *dthis != *dthat) || (dthis != nil && dthat == nil) || (dthis == nil && dthat != nil) {
			return false
		}
	}
	if len(this.Duration) != len(that1.Duration) {
		return false
	}
	for i := range this.Duration {
		if this.Duration[i] != that1.Duration[i] {
			return false
		}
	}
	return true
}
func (this *OneofProtoTypes) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OneofProtoTypes)
	if !ok {
		that2, ok := that.(OneofProtoTypes)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *OneofProtoTypes")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OneofProtoTypes but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OneofProtoTypes but is not nil && this == nil")
	}
	if that1.OneOfProtoTimes == nil {
		if this.OneOfProtoTimes != nil {
			return fmt.Errorf("this.OneOfProtoTimes != nil && that1.OneOfProtoTimes == nil")
		}
	} else if this.OneOfProtoTimes == nil {
		return fmt.Errorf("this.OneOfProtoTimes == nil && that1.OneOfProtoTimes != nil")
	} else if err := this.OneOfProtoTimes.VerboseEqual(that1.OneOfProtoTimes); err != nil {
		return err
	}
	return nil
}
func (this *OneofProtoTypes_Timestamp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OneofProtoTypes_Timestamp)
	if !ok {
		that2, ok := that.(OneofProtoTypes_Timestamp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *OneofProtoTypes_Timestamp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OneofProtoTypes_Timestamp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OneofProtoTypes_Timestamp but is not nil && this == nil")
	}
	if !this.Timestamp.Equal(that1.Timestamp) {
		return fmt.Errorf("Timestamp this(%v) Not Equal that(%v)", this.Timestamp, that1.Timestamp)
	}
	return nil
}
func (this *OneofProtoTypes_Duration) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OneofProtoTypes_Duration)
	if !ok {
		that2, ok := that.(OneofProtoTypes_Duration)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *OneofProtoTypes_Duration")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OneofProtoTypes_Duration but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OneofProtoTypes_Duration but is not nil && this == nil")
	}
	if !this.Duration.Equal(that1.Duration) {
		return fmt.Errorf("Duration this(%v) Not Equal that(%v)", this.Duration, that1.Duration)
	}
	return nil
}
func (this *OneofProtoTypes) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OneofProtoTypes)
	if !ok {
		that2, ok := that.(OneofProtoTypes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.OneOfProtoTimes == nil {
		if this.OneOfProtoTimes != nil {
			return false
		}
	} else if this.OneOfProtoTimes == nil {
		return false
	} else if !this.OneOfProtoTimes.Equal(that1.OneOfProtoTimes) {
		return false
	}
	return true
}
func (this *OneofProtoTypes_Timestamp) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OneofProtoTypes_Timestamp)
	if !ok {
		that2, ok := that.(OneofProtoTypes_Timestamp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Timestamp.Equal(that1.Timestamp) {
		return false
	}
	return true
}
func (this *OneofProtoTypes_Duration) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OneofProtoTypes_Duration)
	if !ok {
		that2, ok := that.(OneofProtoTypes_Duration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Duration.Equal(that1.Duration) {
		return false
	}
	return true
}
func (this *OneofStdTypes) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OneofStdTypes)
	if !ok {
		that2, ok := that.(OneofStdTypes)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *OneofStdTypes")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OneofStdTypes but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OneofStdTypes but is not nil && this == nil")
	}
	if that1.OneOfStdTimes == nil {
		if this.OneOfStdTimes != nil {
			return fmt.Errorf("this.OneOfStdTimes != nil && that1.OneOfStdTimes == nil")
		}
	} else if this.OneOfStdTimes == nil {
		return fmt.Errorf("this.OneOfStdTimes == nil && that1.OneOfStdTimes != nil")
	} else if err := this.OneOfStdTimes.VerboseEqual(that1.OneOfStdTimes); err != nil {
		return err
	}
	return nil
}
func (this *OneofStdTypes_Timestamp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OneofStdTypes_Timestamp)
	if !ok {
		that2, ok := that.(OneofStdTypes_Timestamp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *OneofStdTypes_Timestamp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OneofStdTypes_Timestamp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OneofStdTypes_Timestamp but is not nil && this == nil")
	}
	if that1.Timestamp == nil {
		if this.Timestamp != nil {
			return fmt.Errorf("this.Timestamp != nil && that1.Timestamp == nil")
		}
	} else if !this.Timestamp.Equal(*that1.Timestamp) {
		return fmt.Errorf("Timestamp this(%v) Not Equal that(%v)", this.Timestamp, that1.Timestamp)
	}
	return nil
}
func (this *OneofStdTypes_Duration) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*OneofStdTypes_Duration)
	if !ok {
		that2, ok := that.(OneofStdTypes_Duration)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *OneofStdTypes_Duration")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *OneofStdTypes_Duration but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *OneofStdTypes_Duration but is not nil && this == nil")
	}
	if this.Duration != nil && that1.Duration != nil {
		if *this.Duration != *that1.Duration {
			return fmt.Errorf("Duration this(%v) Not Equal that(%v)", *this.Duration, *that1.Duration)
		}
	} else if this.Duration != nil {
		return fmt.Errorf("this.Duration == nil && that.Duration != nil")
	} else if that1.Duration != nil {
		return fmt.Errorf("Duration this(%v) Not Equal that(%v)", this.Duration, that1.Duration)
	}
	return nil
}
func (this *OneofStdTypes) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OneofStdTypes)
	if !ok {
		that2, ok := that.(OneofStdTypes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.OneOfStdTimes == nil {
		if this.OneOfStdTimes != nil {
			return false
		}
	} else if this.OneOfStdTimes == nil {
		return false
	} else if !this.OneOfStdTimes.Equal(that1.OneOfStdTimes) {
		return false
	}
	return true
}
func (this *OneofStdTypes_Timestamp) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OneofStdTypes_Timestamp)
	if !ok {
		that2, ok := that.(OneofStdTypes_Timestamp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.Timestamp == nil {
		if this.Timestamp != nil {
			return false
		}
	} else if !this.Timestamp.Equal(*that1.Timestamp) {
		return false
	}
	return true
}
func (this *OneofStdTypes_Duration) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OneofStdTypes_Duration)
	if !ok {
		that2, ok := that.(OneofStdTypes_Duration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Duration != nil && that1.Duration != nil {
		if *this.Duration != *that1.Duration {
			return false
		}
	} else if this.Duration != nil {
		return false
	} else if that1.Duration != nil {
		return false
	}
	return true
}
func NewPopulatedKnownTypes(r randyTypes, easy bool) *KnownTypes {
	this := &KnownTypes{}
	if r.Intn(10) != 0 {
		this.Dur = google_protobuf1.NewPopulatedDuration(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Ts = google_protobuf2.NewPopulatedTimestamp(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Dbl = google_protobuf3.NewPopulatedDoubleValue(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Flt = google_protobuf3.NewPopulatedFloatValue(r, easy)
	}
	if r.Intn(10) != 0 {
		this.I64 = google_protobuf3.NewPopulatedInt64Value(r, easy)
	}
	if r.Intn(10) != 0 {
		this.U64 = google_protobuf3.NewPopulatedUInt64Value(r, easy)
	}
	if r.Intn(10) != 0 {
		this.I32 = google_protobuf3.NewPopulatedInt32Value(r, easy)
	}
	if r.Intn(10) != 0 {
		this.U32 = google_protobuf3.NewPopulatedUInt32Value(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Bool = google_protobuf3.NewPopulatedBoolValue(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Str = google_protobuf3.NewPopulatedStringValue(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Bytes = google_protobuf3.NewPopulatedBytesValue(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedProtoTypes(r randyTypes, easy bool) *ProtoTypes {
	this := &ProtoTypes{}
	if r.Intn(10) != 0 {
		this.NullableTimestamp = google_protobuf2.NewPopulatedTimestamp(r, easy)
	}
	if r.Intn(10) != 0 {
		this.NullableDuration = google_protobuf1.NewPopulatedDuration(r, easy)
	}
	v1 := google_protobuf2.NewPopulatedTimestamp(r, easy)
	this.Timestamp = *v1
	v2 := google_protobuf1.NewPopulatedDuration(r, easy)
	this.Duration = *v2
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedStdTypes(r randyTypes, easy bool) *StdTypes {
	this := &StdTypes{}
	if r.Intn(10) != 0 {
		this.NullableStdTime = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if r.Intn(10) != 0 {
		this.NullableStdDuration = github_com_gogo_protobuf_types.NewPopulatedStdDuration(r, easy)
	}
	v3 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.StdTime = *v3
	v4 := github_com_gogo_protobuf_types.NewPopulatedStdDuration(r, easy)
	this.StdDuration = *v4
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRepProtoTypes(r randyTypes, easy bool) *RepProtoTypes {
	this := &RepProtoTypes{}
	if r.Intn(10) != 0 {
		v5 := r.Intn(5)
		this.NullableTimestamps = make([]*google_protobuf2.Timestamp, v5)
		for i := 0; i < v5; i++ {
			this.NullableTimestamps[i] = google_protobuf2.NewPopulatedTimestamp(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v6 := r.Intn(5)
		this.NullableDurations = make([]*google_protobuf1.Duration, v6)
		for i := 0; i < v6; i++ {
			this.NullableDurations[i] = google_protobuf1.NewPopulatedDuration(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v7 := r.Intn(5)
		this.Timestamps = make([]google_protobuf2.Timestamp, v7)
		for i := 0; i < v7; i++ {
			v8 := google_protobuf2.NewPopulatedTimestamp(r, easy)
			this.Timestamps[i] = *v8
		}
	}
	if r.Intn(10) != 0 {
		v9 := r.Intn(5)
		this.Durations = make([]google_protobuf1.Duration, v9)
		for i := 0; i < v9; i++ {
			v10 := google_protobuf1.NewPopulatedDuration(r, easy)
			this.Durations[i] = *v10
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRepStdTypes(r randyTypes, easy bool) *RepStdTypes {
	this := &RepStdTypes{}
	if r.Intn(10) != 0 {
		v11 := r.Intn(5)
		this.NullableStdDurations = make([]*time.Duration, v11)
		for i := 0; i < v11; i++ {
			this.NullableStdDurations[i] = github_com_gogo_protobuf_types.NewPopulatedStdDuration(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v12 := r.Intn(5)
		this.StdDurations = make([]time.Duration, v12)
		for i := 0; i < v12; i++ {
			v13 := github_com_gogo_protobuf_types.NewPopulatedStdDuration(r, easy)
			this.StdDurations[i] = *v13
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMapProtoTypes(r randyTypes, easy bool) *MapProtoTypes {
	this := &MapProtoTypes{}
	if r.Intn(10) != 0 {
		v14 := r.Intn(10)
		this.NullableTimestamp = make(map[int32]*google_protobuf2.Timestamp)
		for i := 0; i < v14; i++ {
			this.NullableTimestamp[int32(r.Int31())] = google_protobuf2.NewPopulatedTimestamp(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v15 := r.Intn(10)
		this.Timestamp = make(map[int32]google_protobuf2.Timestamp)
		for i := 0; i < v15; i++ {
			this.Timestamp[int32(r.Int31())] = *google_protobuf2.NewPopulatedTimestamp(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v16 := r.Intn(10)
		this.NullableDuration = make(map[int32]*google_protobuf1.Duration)
		for i := 0; i < v16; i++ {
			this.NullableDuration[int32(r.Int31())] = google_protobuf1.NewPopulatedDuration(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v17 := r.Intn(10)
		this.Duration = make(map[int32]google_protobuf1.Duration)
		for i := 0; i < v17; i++ {
			this.Duration[int32(r.Int31())] = *google_protobuf1.NewPopulatedDuration(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMapStdTypes(r randyTypes, easy bool) *MapStdTypes {
	this := &MapStdTypes{}
	if r.Intn(10) != 0 {
		v18 := r.Intn(10)
		this.NullableTimestamp = make(map[int32]*time.Time)
		for i := 0; i < v18; i++ {
			this.NullableTimestamp[int32(r.Int31())] = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v19 := r.Intn(10)
		this.Timestamp = make(map[int32]time.Time)
		for i := 0; i < v19; i++ {
			this.Timestamp[int32(r.Int31())] = *github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v20 := r.Intn(10)
		this.NullableDuration = make(map[int32]*time.Duration)
		for i := 0; i < v20; i++ {
			this.NullableDuration[int32(r.Int31())] = github_com_gogo_protobuf_types.NewPopulatedStdDuration(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v21 := r.Intn(10)
		this.Duration = make(map[int32]time.Duration)
		for i := 0; i < v21; i++ {
			this.Duration[int32(r.Int31())] = *github_com_gogo_protobuf_types.NewPopulatedStdDuration(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedOneofProtoTypes(r randyTypes, easy bool) *OneofProtoTypes {
	this := &OneofProtoTypes{}
	oneofNumber_OneOfProtoTimes := []int32{1, 2}[r.Intn(2)]
	switch oneofNumber_OneOfProtoTimes {
	case 1:
		this.OneOfProtoTimes = NewPopulatedOneofProtoTypes_Timestamp(r, easy)
	case 2:
		this.OneOfProtoTimes = NewPopulatedOneofProtoTypes_Duration(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedOneofProtoTypes_Timestamp(r randyTypes, easy bool) *OneofProtoTypes_Timestamp {
	this := &OneofProtoTypes_Timestamp{}
	this.Timestamp = google_protobuf2.NewPopulatedTimestamp(r, easy)
	return this
}
func NewPopulatedOneofProtoTypes_Duration(r randyTypes, easy bool) *OneofProtoTypes_Duration {
	this := &OneofProtoTypes_Duration{}
	this.Duration = google_protobuf1.NewPopulatedDuration(r, easy)
	return this
}
func NewPopulatedOneofStdTypes(r randyTypes, easy bool) *OneofStdTypes {
	this := &OneofStdTypes{}
	oneofNumber_OneOfStdTimes := []int32{1, 2}[r.Intn(2)]
	switch oneofNumber_OneOfStdTimes {
	case 1:
		this.OneOfStdTimes = NewPopulatedOneofStdTypes_Timestamp(r, easy)
	case 2:
		this.OneOfStdTimes = NewPopulatedOneofStdTypes_Duration(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedOneofStdTypes_Timestamp(r randyTypes, easy bool) *OneofStdTypes_Timestamp {
	this := &OneofStdTypes_Timestamp{}
	this.Timestamp = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	return this
}
func NewPopulatedOneofStdTypes_Duration(r randyTypes, easy bool) *OneofStdTypes_Duration {
	this := &OneofStdTypes_Duration{}
	this.Duration = github_com_gogo_protobuf_types.NewPopulatedStdDuration(r, easy)
	return this
}

type randyTypes interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTypes(r randyTypes) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTypes(r randyTypes) string {
	v22 := r.Intn(100)
	tmps := make([]rune, v22)
	for i := 0; i < v22; i++ {
		tmps[i] = randUTF8RuneTypes(r)
	}
	return string(tmps)
}
func randUnrecognizedTypes(r randyTypes, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldTypes(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldTypes(data []byte, r randyTypes, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateTypes(data, uint64(key))
		v23 := r.Int63()
		if r.Intn(2) == 0 {
			v23 *= -1
		}
		data = encodeVarintPopulateTypes(data, uint64(v23))
	case 1:
		data = encodeVarintPopulateTypes(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateTypes(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateTypes(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateTypes(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateTypes(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *KnownTypes) Size() (n int) {
	var l int
	_ = l
	if m.Dur != nil {
		l = m.Dur.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Ts != nil {
		l = m.Ts.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Dbl != nil {
		l = m.Dbl.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Flt != nil {
		l = m.Flt.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.I64 != nil {
		l = m.I64.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.U64 != nil {
		l = m.U64.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.I32 != nil {
		l = m.I32.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.U32 != nil {
		l = m.U32.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Bool != nil {
		l = m.Bool.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Str != nil {
		l = m.Str.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Bytes != nil {
		l = m.Bytes.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ProtoTypes) Size() (n int) {
	var l int
	_ = l
	if m.NullableTimestamp != nil {
		l = m.NullableTimestamp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.NullableDuration != nil {
		l = m.NullableDuration.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.Timestamp.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.Duration.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *StdTypes) Size() (n int) {
	var l int
	_ = l
	if m.NullableStdTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.NullableStdTime)
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.NullableStdDuration != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.NullableStdDuration)
		n += 1 + l + sovTypes(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StdTime)
	n += 1 + l + sovTypes(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.StdDuration)
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *RepProtoTypes) Size() (n int) {
	var l int
	_ = l
	if len(m.NullableTimestamps) > 0 {
		for _, e := range m.NullableTimestamps {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.NullableDurations) > 0 {
		for _, e := range m.NullableDurations {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Timestamps) > 0 {
		for _, e := range m.Timestamps {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Durations) > 0 {
		for _, e := range m.Durations {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *RepStdTypes) Size() (n int) {
	var l int
	_ = l
	if len(m.NullableStdDurations) > 0 {
		for _, e := range m.NullableStdDurations {
			l = github_com_gogo_protobuf_types.SizeOfStdDuration(*e)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.StdDurations) > 0 {
		for _, e := range m.StdDurations {
			l = github_com_gogo_protobuf_types.SizeOfStdDuration(e)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *MapProtoTypes) Size() (n int) {
	var l int
	_ = l
	if len(m.NullableTimestamp) > 0 {
		for k, v := range m.NullableTimestamp {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + sovTypes(uint64(k)) + l
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if len(m.Timestamp) > 0 {
		for k, v := range m.Timestamp {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + sovTypes(uint64(k)) + 1 + l + sovTypes(uint64(l))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if len(m.NullableDuration) > 0 {
		for k, v := range m.NullableDuration {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + sovTypes(uint64(k)) + l
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if len(m.Duration) > 0 {
		for k, v := range m.Duration {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + sovTypes(uint64(k)) + 1 + l + sovTypes(uint64(l))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *MapStdTypes) Size() (n int) {
	var l int
	_ = l
	if len(m.NullableTimestamp) > 0 {
		for k, v := range m.NullableTimestamp {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = github_com_gogo_protobuf_types.SizeOfStdTime(*v)
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + sovTypes(uint64(k)) + l
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if len(m.Timestamp) > 0 {
		for k, v := range m.Timestamp {
			_ = k
			_ = v
			l = github_com_gogo_protobuf_types.SizeOfStdTime(v)
			mapEntrySize := 1 + sovTypes(uint64(k)) + 1 + l + sovTypes(uint64(l))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if len(m.NullableDuration) > 0 {
		for k, v := range m.NullableDuration {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = github_com_gogo_protobuf_types.SizeOfStdDuration(*v)
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + sovTypes(uint64(k)) + l
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if len(m.Duration) > 0 {
		for k, v := range m.Duration {
			_ = k
			_ = v
			l = github_com_gogo_protobuf_types.SizeOfStdDuration(v)
			mapEntrySize := 1 + sovTypes(uint64(k)) + 1 + l + sovTypes(uint64(l))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *OneofProtoTypes) Size() (n int) {
	var l int
	_ = l
	if m.OneOfProtoTimes != nil {
		n += m.OneOfProtoTimes.Size()
	}
	return n
}

func (m *OneofProtoTypes_Timestamp) Size() (n int) {
	var l int
	_ = l
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OneofProtoTypes_Duration) Size() (n int) {
	var l int
	_ = l
	if m.Duration != nil {
		l = m.Duration.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OneofStdTypes) Size() (n int) {
	var l int
	_ = l
	if m.OneOfStdTimes != nil {
		n += m.OneOfStdTimes.Size()
	}
	return n
}

func (m *OneofStdTypes_Timestamp) Size() (n int) {
	var l int
	_ = l
	if m.Timestamp != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Timestamp)
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *OneofStdTypes_Duration) Size() (n int) {
	var l int
	_ = l
	if m.Duration != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.Duration)
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func init() { proto.RegisterFile("combos/neither/types.proto", fileDescriptorTypes) }

var fileDescriptorTypes = []byte{
	// 937 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x56, 0x4d, 0x8f, 0xdb, 0x44,
	0x18, 0x8e, 0xe3, 0xa4, 0xcd, 0xbe, 0x21, 0x6c, 0x3b, 0x7c, 0xc8, 0x04, 0xe4, 0x5d, 0xcc, 0x65,
	0x69, 0x55, 0x07, 0x92, 0x28, 0xa0, 0xa2, 0x56, 0x55, 0xd4, 0xed, 0x6e, 0x8b, 0xca, 0x82, 0xb7,
	0xac, 0x00, 0x09, 0x84, 0xdd, 0x38, 0xa9, 0x85, 0xe3, 0x89, 0xec, 0x31, 0x55, 0x6e, 0xfc, 0x04,
	0x2e, 0x48, 0xc0, 0x8d, 0x03, 0x12, 0x12, 0x17, 0x8e, 0x1c, 0xb9, 0x20, 0xf5, 0x06, 0xbf, 0x00,
	0xba, 0xe1, 0x4f, 0xec, 0x11, 0xcd, 0x78, 0xfc, 0x15, 0x7f, 0xed, 0x1e, 0x56, 0x5c, 0xb8, 0xc5,
	0x9e, 0xe7, 0x79, 0xe6, 0x99, 0x77, 0x9e, 0xf7, 0x8d, 0xa1, 0xfb, 0x10, 0xcf, 0x0d, 0xec, 0xf5,
	0x1c, 0xd3, 0x22, 0x8f, 0x4c, 0xb7, 0x47, 0x96, 0x0b, 0xd3, 0x53, 0x17, 0x2e, 0x26, 0x18, 0x35,
	0xd9, 0x43, 0xf7, 0xda, 0xcc, 0x22, 0x8f, 0x7c, 0x43, 0x7d, 0x88, 0xe7, 0xbd, 0x19, 0x9e, 0xe1,
	0x1e, 0x5b, 0x35, 0xfc, 0x29, 0x7b, 0x62, 0x0f, 0xec, 0x57, 0xc0, 0xea, 0xca, 0x33, 0x8c, 0x67,
	0xb6, 0x19, 0xa3, 0x26, 0xbe, 0xab, 0x13, 0x0b, 0x3b, 0x7c, 0x7d, 0x6b, 0x7d, 0x9d, 0x58, 0x73,
	0xd3, 0x23, 0xfa, 0x7c, 0x51, 0x24, 0xf0, 0xd8, 0xd5, 0x17, 0x0b, 0xd3, 0xe5, 0xb6, 0x94, 0x6f,
	0x1a, 0x00, 0xef, 0x3a, 0xf8, 0xb1, 0xf3, 0x80, 0xda, 0x43, 0x57, 0x41, 0x9c, 0xf8, 0xae, 0x24,
	0x6c, 0x0b, 0x3b, 0xed, 0xfe, 0x4b, 0x6a, 0x40, 0x56, 0x43, 0xb2, 0x7a, 0x9b, 0xef, 0xae, 0x51,
	0x14, 0xba, 0x02, 0x75, 0xe2, 0x49, 0x75, 0x86, 0xed, 0x66, 0xb0, 0x0f, 0x42, 0x27, 0x5a, 0x9d,
	0x78, 0x48, 0x05, 0x71, 0x62, 0xd8, 0x92, 0xc8, 0xc0, 0xaf, 0x64, 0x85, 0xb1, 0x6f, 0xd8, 0xe6,
	0x91, 0x6e, 0xfb, 0xa6, 0x46, 0x81, 0xe8, 0x1a, 0x88, 0x53, 0x9b, 0x48, 0x0d, 0x86, 0x7f, 0x39,
	0x83, 0xbf, 0x63, 0x63, 0x9d, 0x70, 0xf8, 0xd4, 0x26, 0x14, 0x6e, 0x8d, 0x86, 0x52, 0xb3, 0x00,
	0x7e, 0xd7, 0x21, 0xa3, 0x21, 0x87, 0x5b, 0xa3, 0x21, 0x75, 0xe3, 0x8f, 0x86, 0xd2, 0x85, 0x02,
	0x37, 0x1f, 0x26, 0xf1, 0xfe, 0x68, 0xc8, 0xe4, 0x07, 0x7d, 0xe9, 0x62, 0xb1, 0xfc, 0xa0, 0x1f,
	0xca, 0x0f, 0xfa, 0x4c, 0x7e, 0xd0, 0x97, 0x5a, 0x25, 0xf2, 0x11, 0xde, 0x67, 0xf8, 0x86, 0x81,
	0xb1, 0x2d, 0x6d, 0x14, 0x94, 0x72, 0x8c, 0xb1, 0x1d, 0xc0, 0x19, 0x8e, 0xea, 0x7b, 0xc4, 0x95,
	0xa0, 0x40, 0xff, 0x90, 0xb8, 0x96, 0x33, 0xe3, 0xfa, 0x1e, 0x71, 0xd1, 0x9b, 0xd0, 0x34, 0x96,
	0xc4, 0xf4, 0xa4, 0x76, 0xc1, 0x01, 0xc6, 0x74, 0x35, 0x20, 0x04, 0x48, 0xe5, 0xfb, 0x3a, 0xc0,
	0xfb, 0x74, 0x39, 0xc8, 0xc5, 0x3e, 0x5c, 0x76, 0x7c, 0xdb, 0xd6, 0x0d, 0xdb, 0x8c, 0xee, 0x95,
	0xa7, 0xa4, 0xec, 0xe6, 0xb3, 0x24, 0xb4, 0x0b, 0x97, 0xc2, 0x97, 0x61, 0x9a, 0x78, 0x84, 0x4a,
	0xe2, 0x96, 0xa1, 0xa0, 0x9b, 0xb0, 0x11, 0x45, 0x9d, 0xa7, 0xaa, 0xc4, 0xc8, 0xb8, 0xf1, 0xe4,
	0xaf, 0xad, 0x9a, 0x16, 0x53, 0xd0, 0x3b, 0xd0, 0x0a, 0x5b, 0x89, 0x87, 0xac, 0x78, 0x7b, 0xce,
	0x8e, 0x08, 0xca, 0x2f, 0x75, 0x68, 0x1d, 0x92, 0x49, 0x50, 0x9a, 0x7b, 0xb0, 0x19, 0xba, 0xa3,
	0xef, 0xac, 0xb9, 0x59, 0x5d, 0x98, 0x71, 0xe3, 0xeb, 0xbf, 0xb7, 0x04, 0x6d, 0x9d, 0x88, 0x3e,
	0x80, 0xe7, 0x12, 0xaf, 0x4e, 0x5d, 0x9f, 0x71, 0xe3, 0x5b, 0x2a, 0x97, 0xc7, 0x45, 0x37, 0xe1,
	0xa2, 0xc7, 0x6d, 0x55, 0x97, 0xa9, 0x45, 0x0f, 0xca, 0xac, 0x85, 0x24, 0xb4, 0x0b, 0x6d, 0x2f,
	0x61, 0xa5, 0xb2, 0x56, 0x4c, 0x82, 0xd9, 0x49, 0xf2, 0x94, 0x1f, 0xeb, 0xd0, 0xd1, 0xcc, 0x45,
	0x22, 0x52, 0xf7, 0x00, 0x65, 0xd2, 0xe1, 0x49, 0xc2, 0xb6, 0x58, 0x91, 0xa9, 0x1c, 0x16, 0xda,
	0x8b, 0xe3, 0x19, 0xee, 0x48, 0x07, 0x93, 0x58, 0x9e, 0xaa, 0x2c, 0x07, 0xdd, 0x02, 0x20, 0xb1,
	0x19, 0xb1, 0xca, 0x0c, 0x4f, 0x46, 0x82, 0x83, 0x6e, 0xc0, 0xc6, 0x24, 0xb2, 0xd0, 0xa8, 0xb0,
	0x10, 0xe6, 0x32, 0x62, 0x28, 0x3f, 0x0b, 0xd0, 0xd6, 0xcc, 0x45, 0x94, 0xae, 0x43, 0x78, 0x3e,
	0xe7, 0x56, 0xab, 0x0f, 0xc7, 0x23, 0x91, 0x4b, 0x46, 0x7b, 0xf0, 0x8c, 0x97, 0x14, 0xab, 0xb4,
	0x19, 0x5f, 0x6a, 0x8a, 0xa8, 0xfc, 0xde, 0x84, 0xce, 0x7d, 0x3d, 0x79, 0xab, 0x1f, 0xe7, 0x0f,
	0x0a, 0xaa, 0x7f, 0x55, 0x0d, 0xfe, 0x0f, 0x53, 0x04, 0xf5, 0xbd, 0x75, 0xf4, 0xae, 0x43, 0xdc,
	0x65, 0xde, 0xe4, 0xd8, 0x4b, 0xb6, 0x7c, 0x70, 0xfe, 0xd7, 0x72, 0x25, 0xd3, 0x52, 0xd9, 0xde,
	0x3f, 0xca, 0x19, 0x41, 0xc1, 0x55, 0x5f, 0x29, 0xb5, 0x18, 0x82, 0x03, 0x87, 0xd9, 0x99, 0x74,
	0x3b, 0x35, 0x53, 0xa8, 0x9e, 0x92, 0xab, 0x97, 0xd2, 0x59, 0x1f, 0x2e, 0xdd, 0xcf, 0xe1, 0xc5,
	0xfc, 0x9a, 0xa0, 0x4b, 0x20, 0x7e, 0x61, 0x2e, 0xd9, 0x74, 0x69, 0x6a, 0xf4, 0x27, 0x7a, 0x03,
	0x9a, 0x5f, 0xd2, 0xa9, 0x7d, 0x8a, 0x3f, 0xe1, 0x00, 0x78, 0xbd, 0xfe, 0xb6, 0xd0, 0xfd, 0x08,
	0x9e, 0x3d, 0x27, 0xe5, 0xcf, 0xe0, 0x85, 0xdc, 0x62, 0xe5, 0x6c, 0xd0, 0x4b, 0x6f, 0x50, 0xd2,
	0xa6, 0x09, 0xfd, 0x23, 0xe8, 0x9c, 0x87, 0xae, 0xf2, 0x47, 0x13, 0xda, 0xf7, 0xf5, 0xb8, 0xeb,
	0x3e, 0x2d, 0x4e, 0xf1, 0xeb, 0xf1, 0x95, 0x86, 0xf0, 0x82, 0x0c, 0xf3, 0x21, 0x9f, 0x93, 0xe4,
	0xbb, 0xd9, 0x24, 0xbf, 0x9a, 0x23, 0xbb, 0x26, 0x17, 0x0f, 0xe7, 0x44, 0x96, 0x3f, 0x29, 0xcc,
	0xf2, 0x4e, 0x89, 0xd1, 0xb5, 0x04, 0xb2, 0xce, 0xce, 0xe6, 0xf9, 0x4e, 0x26, 0xcf, 0xdb, 0x39,
	0x9a, 0x69, 0xad, 0x78, 0x52, 0xfc, 0x9f, 0xe8, 0xff, 0x32, 0xd1, 0xdf, 0x09, 0xb0, 0x79, 0xe0,
	0x98, 0x78, 0x9a, 0x98, 0xcd, 0xd7, 0x93, 0xb1, 0xab, 0xfc, 0x46, 0xd9, 0x4f, 0xcd, 0xcc, 0xb7,
	0x12, 0x59, 0xa8, 0xf2, 0xb1, 0x9f, 0x18, 0x67, 0xe3, 0xcb, 0xcc, 0xc7, 0x01, 0xf7, 0x41, 0xf5,
	0x94, 0x1f, 0x04, 0xe8, 0x30, 0x6f, 0x51, 0xbf, 0xdd, 0x3a, 0x93, 0xb3, 0xa0, 0xb1, 0xd2, 0xfe,
	0x6e, 0x9c, 0xc1, 0x5f, 0x10, 0xf8, 0x94, 0xcb, 0x4d, 0xe6, 0xe8, 0x60, 0xca, 0x3f, 0xc4, 0xbc,
	0xf1, 0xce, 0xd3, 0x63, 0x59, 0x38, 0x39, 0x96, 0x85, 0x9f, 0x56, 0xb2, 0xf0, 0xeb, 0x4a, 0x16,
	0x7e, 0x5b, 0xc9, 0xc2, 0x93, 0x95, 0x5c, 0xfb, 0x73, 0x25, 0xd7, 0x9e, 0xae, 0x64, 0xe1, 0x64,
	0x25, 0xd7, 0xbe, 0xfa, 0x47, 0xae, 0x19, 0x17, 0x98, 0xfe, 0xe0, 0xdf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x67, 0x69, 0x93, 0x75, 0xfd, 0x0d, 0x00, 0x00,
}
